// <auto-generated />
using System;
using EducationApp.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationApp.Data.Migrations
{
    [DbContext(typeof(EducationAppContext))]
    [Migration("20230110082023_Intitiy")]
    partial class Intitiy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("EducationApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpCatId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Matematik",
                            UpCatId = 0,
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Fizik",
                            UpCatId = 0,
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Kimya",
                            UpCatId = 0,
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "İlkokul Dersleri",
                            UpCatId = 0,
                            Url = "ilkokul-dersleri"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Yabancı Dil",
                            UpCatId = 0,
                            Url = "yabanci-dil"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Almanca",
                            UpCatId = 4,
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Sanat",
                            UpCatId = 0,
                            Url = "sanat"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Dans",
                            UpCatId = 7,
                            Url = "dans"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Piyano",
                            UpCatId = 7,
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "Bilgisayar",
                            UpCatId = 0,
                            Url = "bilgisayar"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            Name = "AutoCad",
                            UpCatId = 10,
                            Url = "autocad"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            Name = "JavaScript",
                            UpCatId = 10,
                            Url = "javascript"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            Name = "Spor",
                            UpCatId = 0,
                            Url = "spor"
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            Name = "Yüzme",
                            UpCatId = 13,
                            Url = "yüzme"
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            Name = "Tenis",
                            UpCatId = 13,
                            Url = "tenis"
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            Name = "Gitar",
                            UpCatId = 7,
                            Url = "gitar"
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            Name = "Photoshop",
                            UpCatId = 10,
                            Url = "photoshop"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "21be1879-fc27-41c1-83dd-d9491be7fab5",
                            Description = "Admin rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f9938a8a-a8d1-4d97-adce-d1f621c37389",
                            Description = "User rolü",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9554c523-946b-4351-aae0-91c352e06766",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a65886e5-95a0-4b63-a05f-43eb32a40e44",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENwPXuOCMxqNobSkMdkoaG39ILrUpthlxRWaZOVAwgwIybqUBFZYfHQXKYYf66dlmg==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "040b6213-e50b-408e-8036-0374ac768a13",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "da22d9ba-2679-48e8-8e9c-06e2e7a9d3fa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb8b26a0-4b61-4142-9c7f-077bd2cfa0d6",
                            Email = "gamzeyildiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAMZEYLDIZ@GMAIL.COM",
                            NormalizedUserName = "GAMZEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENU/EKSnD+noQ8tFhHy96yiSlB51HGUwMQ7MbkES0b0b9pPQFhUA0pFOSNydiigymg==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "acc042e9-b2b1-4a4d-8d66-987d477464cd",
                            TwoFactorEnabled = false,
                            UserName = "gamzeyildiz"
                        },
                        new
                        {
                            Id = "314d3a84-a42a-4019-89f9-c51d31c56733",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d3430f2-aa3d-4cd1-b434-8d5aa08444a2",
                            Email = "ahmetakyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAKYILMAZ@GMAIL.COM",
                            NormalizedUserName = "AHMETAKYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEK986Xtaq9iWlIRnLkpOtq4TBAv+i3b3lsxcKxSUSG+VEM40A5egOSHQG3Ntn5U9EQ==",
                            PhoneNumber = "05368667989",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fd593fda-af54-4ef4-a472-f283b6055f02",
                            TwoFactorEnabled = false,
                            UserName = "ahmetakyilmaz"
                        },
                        new
                        {
                            Id = "51ae6500-2b14-4480-b3a9-e10509673156",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d3314999-8ec7-43d5-be0b-606de4362055",
                            Email = "aysecandan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSECANDAN@GMAIL.COM",
                            NormalizedUserName = "AYSECANDAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDFBQSPoClGQgs+7E/mmt3UFiefsV3XU3KHiCyAfCBOpd/VwllQHHzRcybtEiG6ExA==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9fd3bf80-a26c-49e3-8f77-21d4955d2265",
                            TwoFactorEnabled = false,
                            UserName = "aysecandan"
                        },
                        new
                        {
                            Id = "bf715b55-63ff-45b4-ae60-32d543a885df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e571fb3a-b69e-4ea1-a99f-5699a1b4b23e",
                            Email = "merveakman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERVEAKMAN@GMAIL.COM",
                            NormalizedUserName = "MERVEAKMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFzdwixmzeFLVb+f0KPWpxwW+Eb8h3MHaQeIpPFrQCqxZkP8i0B+45bAVf239icIzg==",
                            PhoneNumber = "05321498998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fb039ac-3a9e-4c89-9154-2ffa7d46761f",
                            TwoFactorEnabled = false,
                            UserName = "merveakman"
                        },
                        new
                        {
                            Id = "f6ab8d27-f6bf-4e39-b9c1-cdbe10d096df",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1e922c9c-2e9a-467a-b6d4-5038c864f9ae",
                            Email = "alikara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIKARA@GMAIL.COM",
                            NormalizedUserName = "ALIKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEK+TKay+ZWY7t+zLw3M6u7OPejg18y1uhI1/wr33kXcWc3sDapZDIpVkktn4rSzf3w==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e328342-82d5-448e-83df-c9a188a7690b",
                            TwoFactorEnabled = false,
                            UserName = "alikara"
                        },
                        new
                        {
                            Id = "34dd098b-0d6f-4038-aabc-825b78205b7a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2f00039a-5df3-4c23-a60e-c0658a33ea5f",
                            Email = "aysesaglam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSESAGLAM@GMAIL.COM",
                            NormalizedUserName = "AYSESAGLAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEK+ArI+6GHNXK9rzVi9MRNE0f8w7Pk5KjImElBch8GrJh+VhiT70tqgUnNW5mXIngA==",
                            PhoneNumber = "05256558998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "38b75790-1723-4f87-8ae6-9b963661b064",
                            TwoFactorEnabled = false,
                            UserName = "aysesaglam"
                        },
                        new
                        {
                            Id = "87874beb-783e-47f5-bd52-b9cd48d8f723",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20f403db-bddc-43e0-bba2-b19afccb5241",
                            Email = "ahmetak@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAK@GMAIL.COM",
                            NormalizedUserName = "AHMETAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEGPtESqHcmCtSZzabPBVuiSu8acInYqbxt1g8rTCwlzZaZp3svm1weHxgDv0Z5TduQ==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9033b299-5e23-4910-aacb-ac31e5c3b5bc",
                            TwoFactorEnabled = false,
                            UserName = "ahmetak"
                        },
                        new
                        {
                            Id = "e5477702-41d0-4b9a-89de-07e9c9dd260b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39f78bd2-a27d-42b7-8a43-0a6594f35904",
                            Email = "beyzaguven@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEYZAGUVEN@GMAIL.COM",
                            NormalizedUserName = "BEYZAGUVEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6jso3+M74pK+Hisl5IZpqrzUG5R/3Pb1zLE4jjGuxklOJv6qj4tisjbLzquNUNbQ==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a8521219-0038-4f52-bcf2-f83965f0dc00",
                            TwoFactorEnabled = false,
                            UserName = "beyzaguven"
                        },
                        new
                        {
                            Id = "dccb7448-197c-4cd9-96ca-ca4e7537c889",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "593d3cbd-cf73-4b7f-9dd1-7ebf3e9e64e7",
                            Email = "busragunduz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRAGUNDUZ@GMAIL.COM",
                            NormalizedUserName = "BUSRAGUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEPdX1legbYyi/YbcMR/HyoL5rieUtQJjqF94I1GUhYz+lE+gJoZFAcL2xya5kIXsZg==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a52a56cc-a997-4b82-abf7-57dd3e70a062",
                            TwoFactorEnabled = false,
                            UserName = "busragunduz"
                        },
                        new
                        {
                            Id = "4c2aca21-ea4c-4931-b476-772f602a506d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b55be43d-0f84-4590-b13c-9583ba61c87e",
                            Email = "mehmetyildirim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETYILDIRIM@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKTV/2jhG0RwPTY/vp2Rosp8b44WQCNFwZJXmgtLKeUQTCKLG63BZ0bAxAgI33wtqw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "438c432b-5604-49be-a1c8-ffe0c42608a2",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildirim"
                        },
                        new
                        {
                            Id = "b7a4aa4e-272e-4f89-b3eb-520f3f0fa6ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36bfce34-9e55-408b-bc3c-417e9b542b7d",
                            Email = "aysegulguzel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEGULGUZEL@GMAIL.COM",
                            NormalizedUserName = "AYSEGULGUZEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEJzRXc9OwGfP0np0CH8cHAud2gd6oyCoKLiHqrqn/Kej2QywQXDZuGI9xbJc0Y7tKw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c4d9dd73-4ad2-4788-b248-14c8c8516c36",
                            TwoFactorEnabled = false,
                            UserName = "aysegulguzel"
                        },
                        new
                        {
                            Id = "bd9226fd-d2cb-4e47-b80c-7fdd6443d7e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b709afad-10f6-40e0-a5b6-f6d3ac003768",
                            Email = "efeyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EFEYILMAZ@GMAIL.COM",
                            NormalizedUserName = "EFEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAENrN6y25HJoDDnflrIpHi8pKJKxZcH/FY2Vnxy+4xim3H+TCu3GEfPsJAz3yHElD9w==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f8246175-acb2-420e-ab8e-6b22d2c21226",
                            TwoFactorEnabled = false,
                            UserName = "efeyilmaz"
                        },
                        new
                        {
                            Id = "b30b66c0-64b2-4f62-b838-e7446564b451",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b55b67f-706b-45e5-bbb4-676296261e14",
                            Email = "arzuozcan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARZUOZCAN@GMAIL.COM",
                            NormalizedUserName = "ARZUOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBDEquLIsRdUPn353XSezHbf6Itp+OhDMS/+wuBHLdpOHBVa3IAuFAFIaHN7mUDbpw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b80478de-45d9-41bc-a5a8-fe76e5bef3da",
                            TwoFactorEnabled = false,
                            UserName = "arzuozcan"
                        },
                        new
                        {
                            Id = "8cc522a5-5c4b-4aa6-9c09-43d06f3c305a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfbc22ed-879a-456c-ada5-482bd7d9e520",
                            Email = "mugesecer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MUGESECER@GMAIL.COM",
                            NormalizedUserName = "MUGESECER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCbB8d90mAUYe8dCAb/zKu1IYJYfMtui055x2vEv3gFNC4lD7eOx4RmQbWzaPvpZw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "849ea692-04e1-40e8-8bb6-ec8fa291c461",
                            TwoFactorEnabled = false,
                            UserName = "mugesecer"
                        },
                        new
                        {
                            Id = "4815a22c-87a1-416d-8438-2beb2bd1c7b7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4135f7e7-cffa-4bcb-a557-b58d974fcd10",
                            Email = "duygukara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYGUKARA@GMAIL.COM",
                            NormalizedUserName = "DUYGUKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEDhmJ8auMXP4Yc44Pnu+O9mOBnd88/g8TteGldxZbEX2fVJVIpz61tycZqOkvrjrBw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd261092-41c5-4bc2-9467-7a5db8a648bb",
                            TwoFactorEnabled = false,
                            UserName = "duygukara"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Gamze Yılmaz. Üniversite öğrencisiyim. Gitar çalmayı çok seviyorum.",
                            FirstName = "Gamze",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Yıldız",
                            LessonPlace = "Yüz Yüze",
                            Url = "gamze-yildiz",
                            UserId = "da22d9ba-2679-48e8-8e9c-06e2e7a9d3fa"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "İzmir",
                            Description = "Tenis öğrenmek istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Akyılmaz",
                            LessonPlace = "Yüz Yüze",
                            Url = "ahmet-akyilmaz",
                            UserId = "314d3a84-a42a-4019-89f9-c51d31c56733"
                        },
                        new
                        {
                            Id = 3,
                            Age = 16,
                            City = "Ankara",
                            Description = "Merhaba, ben Ayşe Candan. Lise öğrencisiyim. Matematik derslerime yardımcı bir öğretmen arıyorum",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "3.png",
                            LastName = "Candan",
                            LessonPlace = "Online",
                            Url = "ayse-candan",
                            UserId = "51ae6500-2b14-4480-b3a9-e10509673156"
                        },
                        new
                        {
                            Id = 4,
                            Age = 18,
                            City = "Bursa",
                            Description = "Merhaba, ben Merve Akman. Fizik derslerinde bana yardımcı olabilecek bir öğretmen arıyorum",
                            FirstName = "Merve",
                            Gender = "Kadın",
                            ImageUrl = "4.png",
                            LastName = "Akman",
                            LessonPlace = "Online",
                            Url = "merve-akman",
                            UserId = "bf715b55-63ff-45b4-ae60-32d543a885df"
                        },
                        new
                        {
                            Id = 5,
                            Age = 22,
                            City = "İstanbul",
                            Description = "Merhaba, ben Ali Kara. İngilizce derslerinde bana yardımcı olabilecek bir öğretmen arıyorum.",
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageUrl = "5.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Url = "ali-kara",
                            UserId = "f6ab8d27-f6bf-4e39-b9c1-cdbe10d096df"
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            City = "İzmir",
                            Description = "Merhaba, ben Ayşe Sağlam. Çeşitli dans dersleri almak istiyorum. Aynı zamanda müzik alanına da çok ilgiliyim, bu sebepten piyano dersleri almak için de bir hoca arıyorum.",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "6.png",
                            LastName = "Sağlam",
                            LessonPlace = "Yüz yüze",
                            Url = "ayse-saglam",
                            UserId = "34dd098b-0d6f-4038-aabc-825b78205b7a"
                        },
                        new
                        {
                            Id = 7,
                            Age = 17,
                            City = "Adana",
                            Description = "Merhaba, ben Ahmet Ak. Matematik ve Fizik alanlarında bana sınava hazırlık sürecinde yardımcı olacak hocalardan ders almak istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "7.png",
                            LastName = "Ak",
                            LessonPlace = "Online",
                            Url = "ahmet-ak",
                            UserId = "87874beb-783e-47f5-bd52-b9cd48d8f723"
                        },
                        new
                        {
                            Id = 8,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Beyza Güven. Mühendislik öğrencisiyim ve AutoCad eğitimi almak istiyorum. Bana bu konuda yardımcı olabilecek eğitmenlerle iletişime geçmek istiyorum.",
                            FirstName = "Beyza",
                            Gender = "Kadın",
                            ImageUrl = "8.png",
                            LastName = "Güven",
                            LessonPlace = "Online",
                            Url = "beyza-guven",
                            UserId = "e5477702-41d0-4b9a-89de-07e9c9dd260b"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StudentCategories", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CategoryId = 16
                        },
                        new
                        {
                            StudentId = 2,
                            CategoryId = 15
                        },
                        new
                        {
                            StudentId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            StudentId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 9
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            CategoryId = 11
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 35,
                            City = "İstanbul",
                            Description = "Hello! 4 yıllık kurum ve özel ders deneyimim sonucunda net bir şekilde söyleyebilirim ki öğretme işini çok severek yapıyorum.Çocuklarda ingilizce, genel ingilizce ve iş ingilizcesi başta olmak üzere birçok özel ders deneyimim oldu. Öğrencilerimden beklentim düzenli ve istekli çalışmaları. Kişiye özel dil öğrenme metodları ile öğrenmek istediğiniz dil konusunda size severek yardımcı olabilirim. Sınava hazırlık ve çeviri çalışmalarınız için de benimle iletişime geçebilirsiniz. ",
                            EducationStatus = "İstanbul Üniversitesi, İngilizce Dili ve Edebiyatı",
                            Experience = "4 yıl",
                            FirstName = "Büşra",
                            Gender = "Kadın",
                            ImageUrl = "9.png",
                            LastName = "Gündüz",
                            LessonPlace = "Online",
                            Price = 200m,
                            Url = "busra-gunduz",
                            UserId = "dccb7448-197c-4cd9-96ca-ca4e7537c889"
                        },
                        new
                        {
                            Id = 2,
                            Age = 42,
                            City = "Ankara",
                            Description = "Çoğunlukla LGS ye hazırlanan öğrencilere Eğitim Koçluğu yaparak matematik dersleri veriyorum.4 yılı üniversitede öğrencilik döneminde olmak üzere toplam 25 yıl matematik dersi anlatma tecrübem vardır.1 adet dershane ve özel okullar için 8. sınıf sınavlara yönelik matematik kitabı yazdım. ",
                            EducationStatus = "Ankara Üniversitesi, Matematik",
                            Experience = "8 yıl",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageUrl = "10.png",
                            LastName = "Yıldırım",
                            LessonPlace = "Online",
                            Price = 250m,
                            Url = "mehmet-yildirim",
                            UserId = "4c2aca21-ea4c-4931-b476-772f602a506d"
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            City = "İzmir",
                            Description = "Boş vakitlerimde ( haftanın her günü öğleden sonra) özel tenis ve yüzme dersleri veriyorum. ",
                            EducationStatus = "Zonguldak Bülent Ecevit Üniversitesi, Beden Eğitimi Ve Spor Öğretmenliği",
                            Experience = "4 yıl",
                            FirstName = "Ayşegül",
                            Gender = "Kadın",
                            ImageUrl = "11.png",
                            LastName = "Güzel",
                            LessonPlace = "Yüz yüze",
                            Price = 300m,
                            Url = "aysegul-guzel",
                            UserId = "b7a4aa4e-272e-4f89-b3eb-520f3f0fa6ff"
                        },
                        new
                        {
                            Id = 4,
                            Age = 38,
                            City = "İstanbul",
                            Description = "Merhaba, Elektro gitar, klasik gitar, caz armonisi, klasik armoni, değişken do tekniğinde kulak eğitimini Türkçe ve İngilizce, tüm dünyada kabul görmüş kaynaklar eşliğinde, makul fiyatlara alabilirsiniz. ",
                            EducationStatus = "Odtü",
                            Experience = "12 yıl",
                            FirstName = "Efe",
                            Gender = "Erkek",
                            ImageUrl = "12.png",
                            LastName = "Yılmaz",
                            LessonPlace = "Yüz yüze",
                            Price = 250m,
                            Url = "efe-yilmaz",
                            UserId = "bd9226fd-d2cb-4e47-b80c-7fdd6443d7e1"
                        },
                        new
                        {
                            Id = 5,
                            Age = 30,
                            City = "Adana",
                            Description = "Önce Anadolu öğretmen lisesi ardından sakarya üniversitesi eğitim fakültesinde lisans eğitimimi tamamladım.2014 yılında mezun olduktan sonra hatrı sayılır Final kurumlarında uzun bir süre öğretmenlik yaptım.Çeşitli çocuk gelişimi ve kişisel gelişim belgelerim mevcut.Şu andada bu kurumda aktif öğretmen olarak çalışmaktayım.Derslerimde iddialı ve alanımda kendime fazlasıyla güvenmekteyim. ",
                            EducationStatus = "Sakarya Üniversitesi , Fizik",
                            Experience = "10 yıl",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            ImageUrl = "13.png",
                            LastName = "Özcan",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "arzu-ozcan",
                            UserId = "b30b66c0-64b2-4f62-b838-e7446564b451"
                        },
                        new
                        {
                            Id = 6,
                            Age = 36,
                            City = "İzmir",
                            Description = "Klasik batı müziği keman bölümü okuyorum. Aynı zamanda piyano çalıyorum. 8 yıl bale ve modern dans eğitimi aldım. ",
                            EducationStatus = "İtü Devlet Konservatuar",
                            Experience = "15 yıl",
                            FirstName = "Müge",
                            Gender = "Kadın",
                            ImageUrl = "14.png",
                            LastName = "Seçer",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "muge-secer",
                            UserId = "8cc522a5-5c4b-4aa6-9c09-43d06f3c305a"
                        },
                        new
                        {
                            Id = 7,
                            Age = 35,
                            City = "İstanbul",
                            Description = "2014 yılında Mimarlık bölümünü 3. olarak 3.06 ortalama ile bitirdim. Üniversite de okuduğum dönem boyunca üst sınıfların projelerini çizer ve modelleme işleri yapardım. Şuan İstanbul da özel bir şirkette çalışmaktayım. Yaklaşık 8 yıldır Mimarlık ve ya İç Mimarlık öğrencilerine özel ders vermekteyim. Autocad, Sketchup modelleme ve Photoshop programları uzmanlık alanımdır. Çalıştığım öğrencilerle Autocad tasarım ve proje çizimlerin dışında modelleme işleri ve jüri sunum için gerekli Photoshop işlerini de birlikte yürütmekteyiz. Ayrıca öğrencilerin ihtiyaçları doğrultusunda ders dışında her zaman telefondan irtibat halinde kalmaktayım.Çoğunlukla online olarak, öğrencinin tercihine göre google meets , zoom ve ya skype üzerinden ders verilmektedir. ",
                            EducationStatus = "İtü, Mimarlık",
                            Experience = "15 yıl",
                            FirstName = "Duygu",
                            Gender = "Kadın",
                            ImageUrl = "15.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "duygu-kara",
                            UserId = "4815a22c-87a1-416d-8438-2beb2bd1c7b7"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TeacherCategories", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            TeacherId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 14
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 15
                        },
                        new
                        {
                            TeacherId = 4,
                            CategoryId = 16
                        },
                        new
                        {
                            TeacherId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            TeacherId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 11
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 17
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 4,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9554c523-946b-4351-aae0-91c352e06766",
                            RoleId = "21be1879-fc27-41c1-83dd-d9491be7fab5"
                        },
                        new
                        {
                            UserId = "da22d9ba-2679-48e8-8e9c-06e2e7a9d3fa",
                            RoleId = "f9938a8a-a8d1-4d97-adce-d1f621c37389"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany("StudentCategories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherCategories")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentCategories");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
