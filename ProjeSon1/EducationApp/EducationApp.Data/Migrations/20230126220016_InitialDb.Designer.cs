// <auto-generated />
using System;
using EducationApp.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationApp.Data.Migrations
{
    [DbContext(typeof(EducationAppContext))]
    [Migration("20230126220016_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("EducationApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PopularCategory")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpCatId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            ImageUrl = "1.png",
                            Name = "Sınava Hazırlık",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "sinava-hazirlik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            ImageUrl = "10.jpg",
                            Name = "Fizik",
                            PopularCategory = false,
                            UpCatId = 1,
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            ImageUrl = "4.jpg",
                            Name = "Kimya",
                            PopularCategory = false,
                            UpCatId = 1,
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            ImageUrl = "13.jpg",
                            Name = "İlkokul Dersleri",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "ilkokul-dersleri"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            ImageUrl = "6.jpg",
                            Name = "Yabancı Dil",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "yabanci-dil"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            ImageUrl = "7.jpg",
                            Name = "Almanca",
                            PopularCategory = false,
                            UpCatId = 5,
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            ImageUrl = "2.jpg",
                            Name = "Sanat",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "sanat"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            ImageUrl = "5.jpg",
                            Name = "Dans",
                            PopularCategory = false,
                            UpCatId = 7,
                            Url = "dans"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            ImageUrl = "12.jpg",
                            Name = "Piyano",
                            PopularCategory = true,
                            UpCatId = 7,
                            Url = "piyano"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            ImageUrl = "11.jpg",
                            Name = "Bilgisayar",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "bilgisayar"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            ImageUrl = "3.jpg",
                            Name = "AutoCad",
                            PopularCategory = false,
                            UpCatId = 10,
                            Url = "autocad"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            ImageUrl = "9.jpg",
                            Name = "JavaScript",
                            PopularCategory = true,
                            UpCatId = 10,
                            Url = "javascript"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            ImageUrl = "14.jpg",
                            Name = "Spor",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "spor"
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            ImageUrl = "15.jpg",
                            Name = "Yüzme",
                            PopularCategory = true,
                            UpCatId = 13,
                            Url = "yüzme"
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            ImageUrl = "16.jpg",
                            Name = "Tenis",
                            PopularCategory = true,
                            UpCatId = 13,
                            Url = "tenis"
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            ImageUrl = "8.jpg",
                            Name = "Gitar",
                            PopularCategory = false,
                            UpCatId = 7,
                            Url = "gitar"
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            ImageUrl = "3.jpg",
                            Name = "Photoshop",
                            PopularCategory = false,
                            UpCatId = 10,
                            Url = "photoshop"
                        },
                        new
                        {
                            Id = 18,
                            Description = "",
                            ImageUrl = "17.jpg",
                            Name = "İnglizce",
                            PopularCategory = true,
                            UpCatId = 5,
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 19,
                            Description = "",
                            ImageUrl = "1.jpg",
                            Name = "Matematik",
                            PopularCategory = true,
                            UpCatId = 1,
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 20,
                            Description = "",
                            ImageUrl = "3.jpg",
                            Name = "Hayat Bilgisi",
                            PopularCategory = false,
                            UpCatId = 4,
                            Url = "hayat-bilgisi"
                        },
                        new
                        {
                            Id = 21,
                            Description = "",
                            ImageUrl = "3.jpg",
                            Name = "Sosyal Bİlgiler",
                            PopularCategory = false,
                            UpCatId = 4,
                            Url = "sosyal-bilgiler"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7402677a-1a72-463f-8751-9192e748fde2",
                            Description = "Admin rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f1d29f9c-054c-4b80-8286-f82df5896400",
                            Description = "User rolü",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ddc65602-b9b4-474c-a1f4-6847668244de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76bfc0be-013c-451b-a006-15d2971d7864",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHHKyNH7eS76Hv1X1xcdxjZWJer05qyHaBhvMiOCHOlrYUFLM3btOcN7mXdSPL+5ag==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ea545ac2-d5fb-4ce5-8410-c73279b2d0aa",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "26a14afc-77fd-478e-9803-8e5d8f84bf4e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53cf6a5d-591a-4067-8c97-0183cfe00bf7",
                            Email = "gamzeyildiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAMZEYLDIZ@GMAIL.COM",
                            NormalizedUserName = "GAMZEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGRi1uodF5I/fxQ1xOLuOS+iYzb2K3ueH86tu5ciUCfJGLyv/Y7nq1ob9qqFxQr6Xg==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff03c4f2-aa19-4edc-9121-431d82e5c02c",
                            TwoFactorEnabled = false,
                            UserName = "gamzeyildiz"
                        },
                        new
                        {
                            Id = "57676b15-23b5-4141-bca4-9ddcb0c9ce3b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "90e55415-9037-44ab-a353-ca4719251450",
                            Email = "ahmetakyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAKYILMAZ@GMAIL.COM",
                            NormalizedUserName = "AHMETAKYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEEWZbG/c2cD7Q03ftWHRGKtxMIiVl2B/dQiMPqr9f512LqHU6sYe/NRGz3cj382QMw==",
                            PhoneNumber = "05368667989",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0542381f-6eb5-4b7f-8fbf-5c940f96aa5e",
                            TwoFactorEnabled = false,
                            UserName = "ahmetakyilmaz"
                        },
                        new
                        {
                            Id = "ba38dd15-960d-4619-88bf-8efbebbcf67b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2cb55783-c9e1-4e10-806c-4b525995cecb",
                            Email = "aysecandan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSECANDAN@GMAIL.COM",
                            NormalizedUserName = "AYSECANDAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGWQWSF8ELFwdpCKNeGy6S8WfORnnO1hoPDfV46Dk5WuBciHkJwSF7NHckDLeBClgA==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "45fa097f-bd84-45ab-adc3-0702688e5f8c",
                            TwoFactorEnabled = false,
                            UserName = "aysecandan"
                        },
                        new
                        {
                            Id = "2ef5dbb6-4744-48fa-95b0-05eedc523a93",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "de3e4013-17c3-46dc-a1ea-cadc5fc00516",
                            Email = "merveakman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERVEAKMAN@GMAIL.COM",
                            NormalizedUserName = "MERVEAKMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOdHQr/j/1hDHCgpfVpBSqrliUBRV+NqD+HIDmQCNC4uC0ocjKm9QZYtJx08H29W8g==",
                            PhoneNumber = "05321498998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be5ca1dd-8398-4ec0-a9e7-abab0f376577",
                            TwoFactorEnabled = false,
                            UserName = "merveakman"
                        },
                        new
                        {
                            Id = "148a3028-df8d-4192-9882-ed5a1cec9e5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb67a6f8-e09a-4aaa-9352-1dd48aeb6965",
                            Email = "alikara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIKARA@GMAIL.COM",
                            NormalizedUserName = "ALIKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHLMqsNJ8c+oIyMakYWqu3SnFFms+m9xdPhnDpVRkwPnZBDItVCCQWweRsm61voNnA==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "081a0207-b6b7-46c8-b676-e8c1d0f18718",
                            TwoFactorEnabled = false,
                            UserName = "alikara"
                        },
                        new
                        {
                            Id = "c2abfb11-cb4a-4d8d-b82b-aed338f88a75",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08275629-1879-4a83-adc4-8c29a3dfcb13",
                            Email = "aysesaglam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSESAGLAM@GMAIL.COM",
                            NormalizedUserName = "AYSESAGLAM",
                            PasswordHash = "AQAAAAIAAYagAAAAELtsPfaHiOzB/fVXu0ciY4BMnWxDyqJp6qUxbwKPXlpAnaAoPOecMYlmdYKENX0WrA==",
                            PhoneNumber = "05256558998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c54e7fb0-6f46-4512-93f4-b3a6f16f972e",
                            TwoFactorEnabled = false,
                            UserName = "aysesaglam"
                        },
                        new
                        {
                            Id = "39c152a7-12b4-4edc-aa77-eca8ed392742",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5fb39a0c-3fd1-4980-bf55-1afa98986d45",
                            Email = "ahmetak@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAK@GMAIL.COM",
                            NormalizedUserName = "AHMETAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEMeIc0xXkGu1L8xUMSwN6k4eEF+SUyi71iIK164bfcpzMfQlAmm4w9vZkhi0GgZ/uw==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9b0b5e5b-4973-45be-91ee-a769922fe423",
                            TwoFactorEnabled = false,
                            UserName = "ahmetak"
                        },
                        new
                        {
                            Id = "b816b12e-3737-4039-97cf-d38eca21fe8f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a76654d1-09ff-41d1-a86e-685675cb81e9",
                            Email = "beyzaguven@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEYZAGUVEN@GMAIL.COM",
                            NormalizedUserName = "BEYZAGUVEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOEo87D/WAtbNMd4cKWlV7B07CIacGP78X3YNYN7Vu86GkVIXiQ4ulaFpGUH30sIZA==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f0022a25-d19f-4a52-aaac-4822cc119d32",
                            TwoFactorEnabled = false,
                            UserName = "beyzaguven"
                        },
                        new
                        {
                            Id = "2350a157-f149-4318-9530-a6208970e142",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52e5ac67-f690-421e-9b66-2363c6a43d8e",
                            Email = "busragunduz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRAGUNDUZ@GMAIL.COM",
                            NormalizedUserName = "BUSRAGUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkN1CTZlQcSVMtCTH+NNd2ftIdYdT/L1Dxmtybb6Ud8CUleQUvAN7jVPftf64S4MA==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47d1672d-9475-469c-89ac-2d2dc7207018",
                            TwoFactorEnabled = false,
                            UserName = "busragunduz"
                        },
                        new
                        {
                            Id = "90535e4d-0fff-4581-8e76-4334cfd1bd73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a65171d-ea1d-41cf-a324-334ff062dfd1",
                            Email = "mehmetyildirim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETYILDIRIM@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEE9v+XA5vqYtUcfMZZB4BMELJV/VM0nvw2Hmpy5Uj9REeTOL3PNrnRGImFLTMfAEwQ==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "734fd487-a77f-4144-99b9-830b838cf40b",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildirim"
                        },
                        new
                        {
                            Id = "23debd6d-e5c2-4600-82b3-7059a3851d3f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20011df6-8c8a-4d3d-b0a9-227b009eb854",
                            Email = "aysegulguzel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEGULGUZEL@GMAIL.COM",
                            NormalizedUserName = "AYSEGULGUZEL",
                            PasswordHash = "AQAAAAIAAYagAAAAEIoTI/ahZewGpOpqTY5VWDIgrXQuqNGasJszitsd2oilcB10pk9SwTz/rbUJHGvzHw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6a699d02-d352-4fbc-a6c5-f10552e6de3a",
                            TwoFactorEnabled = false,
                            UserName = "aysegulguzel"
                        },
                        new
                        {
                            Id = "1fb0d245-b3e3-43ac-9179-98721a6ecb31",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b851a472-5739-47f9-8c73-340f586ea216",
                            Email = "efeyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EFEYILMAZ@GMAIL.COM",
                            NormalizedUserName = "EFEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAELHTOgXpEWalHuA2Q6TJY2+FkCDglr/qTj3qLoYRw4GMvjJWnfj12RflSeC0HcI1OA==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39d7c08f-def7-428c-bd25-0f1b60fa477a",
                            TwoFactorEnabled = false,
                            UserName = "efeyilmaz"
                        },
                        new
                        {
                            Id = "7c13bad4-a6ca-44f6-bfe0-7f738236c34e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7a66bdc-28c5-49b2-96e1-8c871a6e6e9d",
                            Email = "arzuozcan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARZUOZCAN@GMAIL.COM",
                            NormalizedUserName = "ARZUOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEO6g1+PeBh+n/vRpHDkDlxcWpD2Y4UKCjLmS6VFE0hB/4nFAz2Y8mjNuO9+wFNFtvg==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef0032bc-86fe-4a60-94a1-e378668b9404",
                            TwoFactorEnabled = false,
                            UserName = "arzuozcan"
                        },
                        new
                        {
                            Id = "dda145f5-edc1-4f40-be9f-47ba1cc98d3e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bdaa4ed-1faa-4ed5-9bfb-3517725154b8",
                            Email = "mugesecer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MUGESECER@GMAIL.COM",
                            NormalizedUserName = "MUGESECER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKOGX+RbgDb5Sc036LNfOXfmWke5ns6pbUPe0DTGJnAkRx98tWNOfN7U8qJd5UUrTw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7c1d97ca-08d4-4d65-bc75-bafea20d305b",
                            TwoFactorEnabled = false,
                            UserName = "mugesecer"
                        },
                        new
                        {
                            Id = "a7ff4ee1-c446-4786-803c-40997f1e5f3c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14da3e50-c080-431b-90c4-b1fafebbe41d",
                            Email = "duygukara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYGUKARA@GMAIL.COM",
                            NormalizedUserName = "DUYGUKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEHdMig5TLsHQK9SzMrLj1LqK8KvggDKkPPQ+cYQqcbgrwvblo/sOp4CPDWH4wZtdtw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c80cf894-7b0c-4ed9-982e-6f72fb398da8",
                            TwoFactorEnabled = false,
                            UserName = "duygukara"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Gamze Yılmaz. Üniversite öğrencisiyim. Gitar çalmayı çok seviyorum.",
                            FirstName = "Gamze",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Yıldız",
                            LessonPlace = "Yüz Yüze",
                            Url = "gamze-yildiz",
                            UserId = "26a14afc-77fd-478e-9803-8e5d8f84bf4e"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "İzmir",
                            Description = "Tenis öğrenmek istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Akyılmaz",
                            LessonPlace = "Yüz Yüze",
                            Url = "ahmet-akyilmaz",
                            UserId = "57676b15-23b5-4141-bca4-9ddcb0c9ce3b"
                        },
                        new
                        {
                            Id = 3,
                            Age = 16,
                            City = "Ankara",
                            Description = "Merhaba, ben Ayşe Candan. Lise öğrencisiyim. Matematik derslerime yardımcı bir öğretmen arıyorum",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Candan",
                            LessonPlace = "Online",
                            Url = "ayse-candan",
                            UserId = "ba38dd15-960d-4619-88bf-8efbebbcf67b"
                        },
                        new
                        {
                            Id = 4,
                            Age = 18,
                            City = "Bursa",
                            Description = "Merhaba, ben Merve Akman. Fizik derslerinde bana yardımcı olabilecek bir öğretmen arıyorum",
                            FirstName = "Merve",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Akman",
                            LessonPlace = "Online",
                            Url = "merve-akman",
                            UserId = "2ef5dbb6-4744-48fa-95b0-05eedc523a93"
                        },
                        new
                        {
                            Id = 5,
                            Age = 22,
                            City = "İstanbul",
                            Description = "Merhaba, ben Ali Kara. İngilizce derslerinde bana yardımcı olabilecek bir öğretmen arıyorum.",
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Url = "ali-kara",
                            UserId = "148a3028-df8d-4192-9882-ed5a1cec9e5a"
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            City = "İzmir",
                            Description = "Merhaba, ben Ayşe Sağlam. Çeşitli dans dersleri almak istiyorum. Aynı zamanda müzik alanına da çok ilgiliyim, bu sebepten piyano dersleri almak için de bir hoca arıyorum.",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Sağlam",
                            LessonPlace = "Yüz yüze",
                            Url = "ayse-saglam",
                            UserId = "c2abfb11-cb4a-4d8d-b82b-aed338f88a75"
                        },
                        new
                        {
                            Id = 7,
                            Age = 17,
                            City = "Adana",
                            Description = "Merhaba, ben Ahmet Ak. Matematik ve Fizik alanlarında bana sınava hazırlık sürecinde yardımcı olacak hocalardan ders almak istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Ak",
                            LessonPlace = "Online",
                            Url = "ahmet-ak",
                            UserId = "39c152a7-12b4-4edc-aa77-eca8ed392742"
                        },
                        new
                        {
                            Id = 8,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Beyza Güven. Mühendislik öğrencisiyim ve AutoCad eğitimi almak istiyorum. Bana bu konuda yardımcı olabilecek eğitmenlerle iletişime geçmek istiyorum.",
                            FirstName = "Beyza",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Güven",
                            LessonPlace = "Online",
                            Url = "beyza-guven",
                            UserId = "b816b12e-3737-4039-97cf-d38eca21fe8f"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StudentCategories", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CategoryId = 16
                        },
                        new
                        {
                            StudentId = 2,
                            CategoryId = 15
                        },
                        new
                        {
                            StudentId = 3,
                            CategoryId = 19
                        },
                        new
                        {
                            StudentId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 5,
                            CategoryId = 18
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 9
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 19
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            CategoryId = 11
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 35,
                            City = "İstanbul",
                            Description = "Hello! 4 yıllık kurum ve özel ders deneyimim sonucunda net bir şekilde söyleyebilirim ki öğretme işini çok severek yapıyorum.Çocuklarda ingilizce, genel ingilizce ve iş ingilizcesi başta olmak üzere birçok özel ders deneyimim oldu. Öğrencilerimden beklentim düzenli ve istekli çalışmaları. Kişiye özel dil öğrenme metodları ile öğrenmek istediğiniz dil konusunda size severek yardımcı olabilirim. Sınava hazırlık ve çeviri çalışmalarınız için de benimle iletişime geçebilirsiniz. ",
                            EducationStatus = "İstanbul Üniversitesi, İngilizce Dili ve Edebiyatı",
                            Experience = "1-3 yıl",
                            FirstName = "Büşra",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Gündüz",
                            LessonPlace = "Online",
                            Price = 200m,
                            Url = "busra-gunduz",
                            UserId = "2350a157-f149-4318-9530-a6208970e142"
                        },
                        new
                        {
                            Id = 2,
                            Age = 42,
                            City = "Ankara",
                            Description = "Çoğunlukla LGS ye hazırlanan öğrencilere Eğitim Koçluğu yaparak matematik dersleri veriyorum.4 yılı üniversitede öğrencilik döneminde olmak üzere toplam 25 yıl matematik dersi anlatma tecrübem vardır.1 adet dershane ve özel okullar için 8. sınıf sınavlara yönelik matematik kitabı yazdım. ",
                            EducationStatus = "Ankara Üniversitesi, Matematik",
                            Experience = "10+ yıl",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Yıldırım",
                            LessonPlace = "Online",
                            Price = 250m,
                            Url = "mehmet-yildirim",
                            UserId = "90535e4d-0fff-4581-8e76-4334cfd1bd73"
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            City = "İzmir",
                            Description = "Boş vakitlerimde ( haftanın her günü öğleden sonra) özel tenis ve yüzme dersleri veriyorum. ",
                            EducationStatus = "Zonguldak Bülent Ecevit Üniversitesi, Beden Eğitimi Ve Spor Öğretmenliği",
                            Experience = "3-5 yıl",
                            FirstName = "Ayşegül",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Güzel",
                            LessonPlace = "Yüz yüze",
                            Price = 300m,
                            Url = "aysegul-guzel",
                            UserId = "23debd6d-e5c2-4600-82b3-7059a3851d3f"
                        },
                        new
                        {
                            Id = 4,
                            Age = 38,
                            City = "İstanbul",
                            Description = "Merhaba, Elektro gitar, klasik gitar, caz armonisi, klasik armoni, değişken do tekniğinde kulak eğitimini Türkçe ve İngilizce, tüm dünyada kabul görmüş kaynaklar eşliğinde, makul fiyatlara alabilirsiniz. ",
                            EducationStatus = "Odtü",
                            Experience = "5-10 yıl",
                            FirstName = "Efe",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Yılmaz",
                            LessonPlace = "Yüz yüze",
                            Price = 250m,
                            Url = "efe-yilmaz",
                            UserId = "1fb0d245-b3e3-43ac-9179-98721a6ecb31"
                        },
                        new
                        {
                            Id = 5,
                            Age = 30,
                            City = "Adana",
                            Description = "Önce Anadolu öğretmen lisesi ardından sakarya üniversitesi eğitim fakültesinde lisans eğitimimi tamamladım.2014 yılında mezun olduktan sonra hatrı sayılır Final kurumlarında uzun bir süre öğretmenlik yaptım.Çeşitli çocuk gelişimi ve kişisel gelişim belgelerim mevcut.Şu andada bu kurumda aktif öğretmen olarak çalışmaktayım.Derslerimde iddialı ve alanımda kendime fazlasıyla güvenmekteyim. ",
                            EducationStatus = "Sakarya Üniversitesi , Fizik",
                            Experience = "3-5 yıl",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Özcan",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "arzu-ozcan",
                            UserId = "7c13bad4-a6ca-44f6-bfe0-7f738236c34e"
                        },
                        new
                        {
                            Id = 6,
                            Age = 36,
                            City = "İzmir",
                            Description = "Klasik batı müziği keman bölümü okuyorum. Aynı zamanda piyano çalıyorum. 8 yıl bale ve modern dans eğitimi aldım. ",
                            EducationStatus = "İtü Devlet Konservatuar",
                            Experience = "10+ yıl",
                            FirstName = "Müge",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Seçer",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "muge-secer",
                            UserId = "dda145f5-edc1-4f40-be9f-47ba1cc98d3e"
                        },
                        new
                        {
                            Id = 7,
                            Age = 35,
                            City = "İstanbul",
                            Description = "2014 yılında Mimarlık bölümünü 3. olarak 3.06 ortalama ile bitirdim. Üniversite de okuduğum dönem boyunca üst sınıfların projelerini çizer ve modelleme işleri yapardım. Şuan İstanbul da özel bir şirkette çalışmaktayım. Yaklaşık 8 yıldır Mimarlık ve ya İç Mimarlık öğrencilerine özel ders vermekteyim. Autocad, Sketchup modelleme ve Photoshop programları uzmanlık alanımdır. Çalıştığım öğrencilerle Autocad tasarım ve proje çizimlerin dışında modelleme işleri ve jüri sunum için gerekli Photoshop işlerini de birlikte yürütmekteyiz. Ayrıca öğrencilerin ihtiyaçları doğrultusunda ders dışında her zaman telefondan irtibat halinde kalmaktayım.Çoğunlukla online olarak, öğrencinin tercihine göre google meets , zoom ve ya skype üzerinden ders verilmektedir. ",
                            EducationStatus = "İtü, Mimarlık",
                            Experience = "10+ yıl",
                            FirstName = "Duygu",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "duygu-kara",
                            UserId = "a7ff4ee1-c446-4786-803c-40997f1e5f3c"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TeacherCategories", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            CategoryId = 18
                        },
                        new
                        {
                            TeacherId = 2,
                            CategoryId = 19
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 14
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 15
                        },
                        new
                        {
                            TeacherId = 4,
                            CategoryId = 16
                        },
                        new
                        {
                            TeacherId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            TeacherId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 11
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 17
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 4,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ddc65602-b9b4-474c-a1f4-6847668244de",
                            RoleId = "7402677a-1a72-463f-8751-9192e748fde2"
                        },
                        new
                        {
                            UserId = "26a14afc-77fd-478e-9803-8e5d8f84bf4e",
                            RoleId = "f1d29f9c-054c-4b80-8286-f82df5896400"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany("StudentCategories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherCategories")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentCategories");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
