// <auto-generated />
using System;
using EducationApp.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationApp.Data.Migrations
{
    [DbContext(typeof(EducationAppContext))]
    [Migration("20230110074542_Intitiy")]
    partial class Intitiy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("EducationApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpCatId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Matematik",
                            UpCatId = 0,
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Fizik",
                            UpCatId = 0,
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Kimya",
                            UpCatId = 0,
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "İlkokul Dersleri",
                            UpCatId = 0,
                            Url = "ilkokul-dersleri"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Yabancı Dil",
                            UpCatId = 0,
                            Url = "yabanci-dil"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Almanca",
                            UpCatId = 4,
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Sanat",
                            UpCatId = 0,
                            Url = "sanat"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Dans",
                            UpCatId = 7,
                            Url = "dans"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Piyano",
                            UpCatId = 7,
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "Bilgisayar",
                            UpCatId = 0,
                            Url = "bilgisayar"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            Name = "AutoCad",
                            UpCatId = 10,
                            Url = "autocad"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            Name = "JavaScript",
                            UpCatId = 10,
                            Url = "javascript"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            Name = "Spor",
                            UpCatId = 0,
                            Url = "spor"
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            Name = "Yüzme",
                            UpCatId = 13,
                            Url = "yüzme"
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            Name = "Tenis",
                            UpCatId = 13,
                            Url = "tenis"
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            Name = "Gitar",
                            UpCatId = 7,
                            Url = "gitar"
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            Name = "Photoshop",
                            UpCatId = 10,
                            Url = "photoshop"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d42a4d0b-4247-42c4-a4c0-dc21754fd946",
                            Description = "Admin rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "96e02713-90c5-4b01-bbf1-f000086bc2c3",
                            Description = "User rolü",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3d00b943-a6f6-48d0-880a-5196b6bd0ccd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "37f8166d-bfea-4997-b6fd-5b990dc936f9",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAu7Y+p7iAgJGRQ01ksx/Qe99PcyS2sDh0ypsla0x957SQdNOvhrTif+4Wa90m3VPA==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cb1f06a8-b4da-46cf-8bd0-1b93aeb2d0c6",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "cc7790b7-8fdb-4d8d-88ae-72df5fc02c38",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8230a11-490a-4864-b105-3258d8d1da43",
                            Email = "gamzeyildiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAMZEYLDIZ@GMAIL.COM",
                            NormalizedUserName = "GAMZEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEOjAjoUzQJb83llsxVvDT9r3dbre49SoI6UAehC5UeamnupJvivipyubWdYLButb8Q==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "667393c4-8252-4951-aaf5-3b0a3f6a2669",
                            TwoFactorEnabled = false,
                            UserName = "gamzeyildiz"
                        },
                        new
                        {
                            Id = "dfc377ab-a260-46fc-b22d-c0c464caad68",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "50a155c7-fb06-41b2-9ab0-aec13125c7e8",
                            Email = "aysecandan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSECANDAN@GMAIL.COM",
                            NormalizedUserName = "AYSECANDAN",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17e7afac-b8f6-4d26-9229-dde62a70c6a6",
                            TwoFactorEnabled = false,
                            UserName = "aysecandan"
                        },
                        new
                        {
                            Id = "5c7acb40-ea2e-47fb-bb42-03eda425bbfa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f93d6e74-3e61-45d8-aaf9-2d0b05620669",
                            Email = "merveakman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERVEAKMAN@GMAIL.COM",
                            NormalizedUserName = "MERVEAKMAN",
                            PhoneNumber = "05321498998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd9f8849-21a8-4575-b80a-8b839f4fa782",
                            TwoFactorEnabled = false,
                            UserName = "merveakman"
                        },
                        new
                        {
                            Id = "c3276a4b-fab0-4fdd-a5bb-b217def1a689",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bcc13416-6735-44d1-8daa-2e6867ad260d",
                            Email = "alikara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIKARA@GMAIL.COM",
                            NormalizedUserName = "ALIKARA",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3f77d8a4-d412-47d3-941a-b7cede5d35a2",
                            TwoFactorEnabled = false,
                            UserName = "alikara"
                        },
                        new
                        {
                            Id = "af233ec6-fdef-47ef-9732-c6d4462b3ed7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1c812937-6fe0-433a-990c-bb075f56174a",
                            Email = "aysesaglam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSESAGLAM@GMAIL.COM",
                            NormalizedUserName = "AYSESAGLAM",
                            PhoneNumber = "05256558998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36b024d2-0673-4f03-936a-27d90d1047e4",
                            TwoFactorEnabled = false,
                            UserName = "aysesaglam"
                        },
                        new
                        {
                            Id = "bb195c46-27d2-425d-95fa-bcf8efccbb7a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f3aec0f-9e3d-4499-95a8-5709f5e994ae",
                            Email = "ahmetak@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAK@GMAIL.COM",
                            NormalizedUserName = "AHMETAK",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "80887e17-5c38-4960-80ab-7e2f5f785773",
                            TwoFactorEnabled = false,
                            UserName = "ahmetak"
                        },
                        new
                        {
                            Id = "8566fa5b-7379-42e1-8997-29c9ae1f5d2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce96a6d9-2557-4e30-811e-c88d8bb74cce",
                            Email = "beyzaguven@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEYZAGUVEN@GMAIL.COM",
                            NormalizedUserName = "BEYZAGUVEN",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d7e894e-e6a8-4395-87ea-9700c7b24621",
                            TwoFactorEnabled = false,
                            UserName = "beyzaguven"
                        },
                        new
                        {
                            Id = "1fa21988-7c7c-44b0-a34f-e447fc1ec33e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "10dcf627-6a40-438f-b0e1-6809462bfd82",
                            Email = "busragunduz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRAGUNDUZ@GMAIL.COM",
                            NormalizedUserName = "BUSRAGUNDUZ",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "98ecd546-8f2f-4161-99b7-4f5a318ad0b5",
                            TwoFactorEnabled = false,
                            UserName = "busragunduz"
                        },
                        new
                        {
                            Id = "ebe10aca-2c6f-416d-ba8f-fe019ff2b512",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9e961ed7-2bb6-40c3-b712-67bbd6780bf5",
                            Email = "mehmetyildirim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETYILDIRIM@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIRIM",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f125766f-a574-4b21-a845-237e6de44bd9",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildirim"
                        },
                        new
                        {
                            Id = "eede42d3-fba6-45e2-8e4f-3dffbc56100c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cb2258fb-ab00-41b3-99ae-7eda46eef100",
                            Email = "aysegulguzel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEGULGUZEL@GMAIL.COM",
                            NormalizedUserName = "AYSEGULGUZEL",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8da216ca-119c-424b-9e8b-98a878cd3291",
                            TwoFactorEnabled = false,
                            UserName = "aysegulguzel"
                        },
                        new
                        {
                            Id = "60273b9a-212a-4dc8-b2f7-c457dec77011",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5efcebb7-354f-4c99-8b4d-22fb5d983dfc",
                            Email = "efeyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EFEYILMAZ@GMAIL.COM",
                            NormalizedUserName = "EFEYILMAZ",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "954c409e-04f2-4b20-a115-f8db0544bb67",
                            TwoFactorEnabled = false,
                            UserName = "efeyilmaz"
                        },
                        new
                        {
                            Id = "8ff2e2ac-3883-483e-8aca-498f8ef5a39c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "53586169-2a23-438d-b0f2-a8a30aafba96",
                            Email = "arzuozcan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARZUOZCAN@GMAIL.COM",
                            NormalizedUserName = "ARZUOZCAN",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b0e502f-3fe7-4345-957a-489f74fbc787",
                            TwoFactorEnabled = false,
                            UserName = "arzuozcan"
                        },
                        new
                        {
                            Id = "40f9cac7-9bac-4a92-bd06-218480166039",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d935db0-6935-4de1-94dd-261b6d8108cf",
                            Email = "mugesecer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MUGESECER@GMAIL.COM",
                            NormalizedUserName = "MUGESECER",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b8075a0d-f435-477a-aea4-1d933517a22f",
                            TwoFactorEnabled = false,
                            UserName = "mugesecer"
                        },
                        new
                        {
                            Id = "663c9f31-0d58-45f5-bd2f-ed4713ed8668",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7006266d-7abc-4832-8f40-408f2d14e2ec",
                            Email = "duygukara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYGUKARA@GMAIL.COM",
                            NormalizedUserName = "DUYGUKARA",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf4ab2ba-57e7-44b0-a068-1315003f2125",
                            TwoFactorEnabled = false,
                            UserName = "duygukara"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Gamze Yılmaz. Üniversite öğrencisiyim. Gitar çalmayı çok seviyorum.",
                            FirstName = "Gamze",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Yıldız",
                            LessonPlace = "Yüz Yüze",
                            Url = "gamze-yildiz",
                            UserId = "cc7790b7-8fdb-4d8d-88ae-72df5fc02c38"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "İzmir",
                            Description = "Tenis öğrenmek istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Akyılmaz",
                            LessonPlace = "Yüz Yüze",
                            Url = "ahmet-akyilmaz",
                            UserId = "dfc377ab-a260-46fc-b22d-c0c464caad68"
                        },
                        new
                        {
                            Id = 3,
                            Age = 16,
                            City = "Ankara",
                            Description = "Merhaba, ben Ayşe Candan. Lise öğrencisiyim. Matematik derslerime yardımcı bir öğretmen arıyorum",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "3.png",
                            LastName = "Candan",
                            LessonPlace = "Online",
                            Url = "ayse-candan",
                            UserId = "5c7acb40-ea2e-47fb-bb42-03eda425bbfa"
                        },
                        new
                        {
                            Id = 4,
                            Age = 18,
                            City = "Bursa",
                            Description = "Merhaba, ben Merve Akman. Fizik derslerinde bana yardımcı olabilecek bir öğretmen arıyorum",
                            FirstName = "Merve",
                            Gender = "Kadın",
                            ImageUrl = "4.png",
                            LastName = "Akman",
                            LessonPlace = "Online",
                            Url = "merve-akman",
                            UserId = "c3276a4b-fab0-4fdd-a5bb-b217def1a689"
                        },
                        new
                        {
                            Id = 5,
                            Age = 22,
                            City = "İstanbul",
                            Description = "Merhaba, ben Ali Kara. İngilizce derslerinde bana yardımcı olabilecek bir öğretmen arıyorum.",
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageUrl = "5.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Url = "ali-kara",
                            UserId = "af233ec6-fdef-47ef-9732-c6d4462b3ed7"
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            City = "İzmir",
                            Description = "Merhaba, ben Ayşe Sağlam. Çeşitli dans dersleri almak istiyorum. Aynı zamanda müzik alanına da çok ilgiliyim, bu sebepten piyano dersleri almak için de bir hoca arıyorum.",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "6.png",
                            LastName = "Sağlam",
                            LessonPlace = "Yüz yüze",
                            Url = "ayse-saglam",
                            UserId = "bb195c46-27d2-425d-95fa-bcf8efccbb7a"
                        },
                        new
                        {
                            Id = 7,
                            Age = 17,
                            City = "Adana",
                            Description = "Merhaba, ben Ahmet Ak. Matematik ve Fizik alanlarında bana sınava hazırlık sürecinde yardımcı olacak hocalardan ders almak istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "7.png",
                            LastName = "Ak",
                            LessonPlace = "Online",
                            Url = "ahmet-ak",
                            UserId = "8566fa5b-7379-42e1-8997-29c9ae1f5d2c"
                        },
                        new
                        {
                            Id = 8,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Beyza Güven. Mühendislik öğrencisiyim ve AutoCad eğitimi almak istiyorum. Bana bu konuda yardımcı olabilecek eğitmenlerle iletişime geçmek istiyorum.",
                            FirstName = "Beyza",
                            Gender = "Kadın",
                            ImageUrl = "8.png",
                            LastName = "Güven",
                            LessonPlace = "Online",
                            Url = "beyza-guven",
                            UserId = "1fa21988-7c7c-44b0-a34f-e447fc1ec33e"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StudentCategories", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CategoryId = 16
                        },
                        new
                        {
                            StudentId = 2,
                            CategoryId = 15
                        },
                        new
                        {
                            StudentId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            StudentId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 9
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            CategoryId = 11
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 35,
                            City = "İstanbul",
                            Description = "Hello! 4 yıllık kurum ve özel ders deneyimim sonucunda net bir şekilde söyleyebilirim ki öğretme işini çok severek yapıyorum.Çocuklarda ingilizce, genel ingilizce ve iş ingilizcesi başta olmak üzere birçok özel ders deneyimim oldu. Öğrencilerimden beklentim düzenli ve istekli çalışmaları. Kişiye özel dil öğrenme metodları ile öğrenmek istediğiniz dil konusunda size severek yardımcı olabilirim. Sınava hazırlık ve çeviri çalışmalarınız için de benimle iletişime geçebilirsiniz. ",
                            EducationStatus = "İstanbul Üniversitesi, İngilizce Dili ve Edebiyatı",
                            Experience = "4 yıl",
                            FirstName = "Büşra",
                            Gender = "Kadın",
                            ImageUrl = "9.png",
                            LastName = "Gündüz",
                            LessonPlace = "Online",
                            Price = 200m,
                            Url = "busra-gunduz",
                            UserId = "ebe10aca-2c6f-416d-ba8f-fe019ff2b512"
                        },
                        new
                        {
                            Id = 2,
                            Age = 42,
                            City = "Ankara",
                            Description = "Çoğunlukla LGS ye hazırlanan öğrencilere Eğitim Koçluğu yaparak matematik dersleri veriyorum.4 yılı üniversitede öğrencilik döneminde olmak üzere toplam 25 yıl matematik dersi anlatma tecrübem vardır.1 adet dershane ve özel okullar için 8. sınıf sınavlara yönelik matematik kitabı yazdım. ",
                            EducationStatus = "Ankara Üniversitesi, Matematik",
                            Experience = "8 yıl",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageUrl = "10.png",
                            LastName = "Yıldırım",
                            LessonPlace = "Online",
                            Price = 250m,
                            Url = "mehmet-yildirim",
                            UserId = "eede42d3-fba6-45e2-8e4f-3dffbc56100c"
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            City = "İzmir",
                            Description = "Boş vakitlerimde ( haftanın her günü öğleden sonra) özel tenis ve yüzme dersleri veriyorum. ",
                            EducationStatus = "Zonguldak Bülent Ecevit Üniversitesi, Beden Eğitimi Ve Spor Öğretmenliği",
                            Experience = "4 yıl",
                            FirstName = "Ayşegül",
                            Gender = "Kadın",
                            ImageUrl = "11.png",
                            LastName = "Güzel",
                            LessonPlace = "Yüz yüze",
                            Price = 300m,
                            Url = "aysegul-guzel",
                            UserId = "60273b9a-212a-4dc8-b2f7-c457dec77011"
                        },
                        new
                        {
                            Id = 4,
                            Age = 38,
                            City = "İstanbul",
                            Description = "Merhaba, Elektro gitar, klasik gitar, caz armonisi, klasik armoni, değişken do tekniğinde kulak eğitimini Türkçe ve İngilizce, tüm dünyada kabul görmüş kaynaklar eşliğinde, makul fiyatlara alabilirsiniz. ",
                            EducationStatus = "Odtü",
                            Experience = "12 yıl",
                            FirstName = "Efe",
                            Gender = "Erkek",
                            ImageUrl = "12.png",
                            LastName = "Yılmaz",
                            LessonPlace = "Yüz yüze",
                            Price = 250m,
                            Url = "efe-yilmaz",
                            UserId = "8ff2e2ac-3883-483e-8aca-498f8ef5a39c"
                        },
                        new
                        {
                            Id = 5,
                            Age = 30,
                            City = "Adana",
                            Description = "Önce Anadolu öğretmen lisesi ardından sakarya üniversitesi eğitim fakültesinde lisans eğitimimi tamamladım.2014 yılında mezun olduktan sonra hatrı sayılır Final kurumlarında uzun bir süre öğretmenlik yaptım.Çeşitli çocuk gelişimi ve kişisel gelişim belgelerim mevcut.Şu andada bu kurumda aktif öğretmen olarak çalışmaktayım.Derslerimde iddialı ve alanımda kendime fazlasıyla güvenmekteyim. ",
                            EducationStatus = "Sakarya Üniversitesi , Fizik",
                            Experience = "10 yıl",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            ImageUrl = "13.png",
                            LastName = "Özcan",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "arzu-ozcan",
                            UserId = "40f9cac7-9bac-4a92-bd06-218480166039"
                        },
                        new
                        {
                            Id = 6,
                            Age = 36,
                            City = "İzmir",
                            Description = "Klasik batı müziği keman bölümü okuyorum. Aynı zamanda piyano çalıyorum. 8 yıl bale ve modern dans eğitimi aldım. ",
                            EducationStatus = "İtü Devlet Konservatuar",
                            Experience = "15 yıl",
                            FirstName = "Müge",
                            Gender = "Kadın",
                            ImageUrl = "14.png",
                            LastName = "Seçer",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "muge-secer",
                            UserId = "663c9f31-0d58-45f5-bd2f-ed4713ed8668"
                        },
                        new
                        {
                            Id = 7,
                            Age = 35,
                            City = "İstanbul",
                            Description = "2014 yılında Mimarlık bölümünü 3. olarak 3.06 ortalama ile bitirdim. Üniversite de okuduğum dönem boyunca üst sınıfların projelerini çizer ve modelleme işleri yapardım. Şuan İstanbul da özel bir şirkette çalışmaktayım. Yaklaşık 8 yıldır Mimarlık ve ya İç Mimarlık öğrencilerine özel ders vermekteyim. Autocad, Sketchup modelleme ve Photoshop programları uzmanlık alanımdır. Çalıştığım öğrencilerle Autocad tasarım ve proje çizimlerin dışında modelleme işleri ve jüri sunum için gerekli Photoshop işlerini de birlikte yürütmekteyiz. Ayrıca öğrencilerin ihtiyaçları doğrultusunda ders dışında her zaman telefondan irtibat halinde kalmaktayım.Çoğunlukla online olarak, öğrencinin tercihine göre google meets , zoom ve ya skype üzerinden ders verilmektedir. ",
                            EducationStatus = "İtü, Mimarlık",
                            Experience = "15 yıl",
                            FirstName = "Duygu",
                            Gender = "Kadın",
                            ImageUrl = "15.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "duygu-kara",
                            UserId = "663c9f31-0d58-45f5-bd2f-ed4713ed8668"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TeacherCategories", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            TeacherId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 14
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 15
                        },
                        new
                        {
                            TeacherId = 4,
                            CategoryId = 16
                        },
                        new
                        {
                            TeacherId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            TeacherId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 11
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 17
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 4,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3d00b943-a6f6-48d0-880a-5196b6bd0ccd",
                            RoleId = "d42a4d0b-4247-42c4-a4c0-dc21754fd946"
                        },
                        new
                        {
                            UserId = "cc7790b7-8fdb-4d8d-88ae-72df5fc02c38",
                            RoleId = "96e02713-90c5-4b01-bbf1-f000086bc2c3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany("StudentCategories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherCategories")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentCategories");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
