// <auto-generated />
using System;
using EducationApp.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationApp.Data.Migrations
{
    [DbContext(typeof(EducationAppContext))]
    partial class EducationAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("EducationApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PopularCategory")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UpCatId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Sınava Hazırlık",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "sinava-hazirlik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Fizik",
                            PopularCategory = false,
                            UpCatId = 1,
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Kimya",
                            PopularCategory = false,
                            UpCatId = 1,
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "İlkokul Dersleri",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "ilkokul-dersleri"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Yabancı Dil",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "yabanci-dil"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Almanca",
                            PopularCategory = false,
                            UpCatId = 5,
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Sanat",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "sanat"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Dans",
                            PopularCategory = false,
                            UpCatId = 7,
                            Url = "dans"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Piyano",
                            PopularCategory = true,
                            UpCatId = 7,
                            Url = "piyano"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Bilgisayar",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "bilgisayar"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "AutoCad",
                            PopularCategory = false,
                            UpCatId = 10,
                            Url = "autocad"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "JavaScript",
                            PopularCategory = true,
                            UpCatId = 10,
                            Url = "javascript"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Spor",
                            PopularCategory = false,
                            UpCatId = 0,
                            Url = "spor"
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Yüzme",
                            PopularCategory = true,
                            UpCatId = 13,
                            Url = "yüzme"
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Tenis",
                            PopularCategory = true,
                            UpCatId = 13,
                            Url = "tenis"
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Gitar",
                            PopularCategory = false,
                            UpCatId = 7,
                            Url = "gitar"
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Photoshop",
                            PopularCategory = false,
                            UpCatId = 10,
                            Url = "photoshop"
                        },
                        new
                        {
                            Id = 18,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "İnglizce",
                            PopularCategory = true,
                            UpCatId = 5,
                            Url = "ingilizce"
                        },
                        new
                        {
                            Id = 19,
                            Description = "",
                            ImageUrl = "3.png",
                            Name = "Matematik",
                            PopularCategory = true,
                            UpCatId = 1,
                            Url = "matematik"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "12c17632-dcee-4c30-a5d4-0e8c58e25552",
                            Description = "Admin rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ea49c988-55fd-4b35-a8b5-ec706e8c0f4b",
                            Description = "User rolü",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "66489368-2fa5-4bfc-aaa4-ed3ecf526aa2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "878d1f98-2b81-4801-b899-ee90356a9767",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFAuYMifmwHxm3mu7ZCe5F+f2REjcp/gYj0TJTHUzCBhokO56VSZxcU6p5WSykr4Cw==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3d4a27c7-84f6-4e38-98ca-fe3849265dfd",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "59ec29f5-16c3-460a-9eea-ce9817acd365",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6d677cf3-3f73-4d03-a094-601321dff845",
                            Email = "gamzeyildiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAMZEYLDIZ@GMAIL.COM",
                            NormalizedUserName = "GAMZEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEP74vMxUI1MqWpT3G2j1GvQH6U9qjHwQ1yUVMRiua7A6fzZk+bVbyGRxk6SODwswsg==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "52240310-6cc7-42d2-bdbb-609fedbb8003",
                            TwoFactorEnabled = false,
                            UserName = "gamzeyildiz"
                        },
                        new
                        {
                            Id = "c14d4755-ef86-43fb-93c0-9d338694c945",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9799b813-1520-4529-b931-605e8a3ebd6f",
                            Email = "ahmetakyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAKYILMAZ@GMAIL.COM",
                            NormalizedUserName = "AHMETAKYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMJsC2tIRPNC7GHeAQvt9k9IVSOOaHmQmIxwSDrpDPUvM2FesOagQMhH2D0lBIfSfg==",
                            PhoneNumber = "05368667989",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bd6cfdd4-ca67-40ed-932d-bdd0838d040a",
                            TwoFactorEnabled = false,
                            UserName = "ahmetakyilmaz"
                        },
                        new
                        {
                            Id = "d866f366-1251-499a-aedb-5116ecb4447e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40cfad8f-3299-4ca2-9d60-e879d39817c7",
                            Email = "aysecandan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSECANDAN@GMAIL.COM",
                            NormalizedUserName = "AYSECANDAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEErdLH7SdoaI8bMOmaOS48xENVkSpXjd0mg39u7VFfgnnRxrMfF2IebMByqLXvspqA==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1dc9efe8-3b44-46af-8ddd-42daeb77ea45",
                            TwoFactorEnabled = false,
                            UserName = "aysecandan"
                        },
                        new
                        {
                            Id = "fb051eec-1b69-4d9a-ae97-57863cf83321",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1071297-3817-47f7-97a5-c2021bf9cb83",
                            Email = "merveakman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERVEAKMAN@GMAIL.COM",
                            NormalizedUserName = "MERVEAKMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEMTFGq99gtO1l/kn95dm7M0JIlKmnKkQft2sJUND0sLk/O+ku4ZDRtnR6i7st7N6CA==",
                            PhoneNumber = "05321498998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bedf5b7d-844d-48ae-bb32-815c89694510",
                            TwoFactorEnabled = false,
                            UserName = "merveakman"
                        },
                        new
                        {
                            Id = "1a92938a-5039-496b-aaff-b76ae73ea5c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0074bbd-0755-4f14-af62-80a0d44fd2cc",
                            Email = "alikara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIKARA@GMAIL.COM",
                            NormalizedUserName = "ALIKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAECkYb8hS+iAXn3Abz+9FpfNgCr16ou4lRQyZ6iX/2WOByxOljUtdP284OCE+fVFMLQ==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c44ab5e-bcaa-4bd9-974e-e82118846995",
                            TwoFactorEnabled = false,
                            UserName = "alikara"
                        },
                        new
                        {
                            Id = "6e22c75f-6b7c-4fbf-999b-fa2fc80ad400",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abbb0550-928d-46d6-bb0c-156f444a1dbe",
                            Email = "aysesaglam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSESAGLAM@GMAIL.COM",
                            NormalizedUserName = "AYSESAGLAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBR8FU4vQirxekOQMfYUKGHSo0s/vNZ3+oUQH7I5lYoe1AIJCShXwVlJooj7P7y5xg==",
                            PhoneNumber = "05256558998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5c84b2d-5e5a-4ba7-a8f8-24b9946c8d21",
                            TwoFactorEnabled = false,
                            UserName = "aysesaglam"
                        },
                        new
                        {
                            Id = "b4f20ec2-77ed-4c97-8cf3-3d65ee6c8071",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ebb56271-8c6c-4f69-bded-f72c21ed1b0c",
                            Email = "ahmetak@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAK@GMAIL.COM",
                            NormalizedUserName = "AHMETAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEMJlSy05RxZADULTPdJZ6eMmpJpQ7vkdvavSMoAr53vDLJvvuYTE7GHm6Gvi9oaRLQ==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c9a287ad-a374-4630-8e69-c64cdde22eb2",
                            TwoFactorEnabled = false,
                            UserName = "ahmetak"
                        },
                        new
                        {
                            Id = "b2d02d00-2588-4407-b8d2-8cf9295269de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d29cf29a-a2fe-43a3-8a7f-ae5aa8b7f8f7",
                            Email = "beyzaguven@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEYZAGUVEN@GMAIL.COM",
                            NormalizedUserName = "BEYZAGUVEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBbaTza9OZLDXNCBlBcp2dRQUGi4qeWJKsietRaVNopImgwMbOJCoiGFF+ht+0hMEw==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b08e438-5c7a-4c2a-9158-b5e984cc74d9",
                            TwoFactorEnabled = false,
                            UserName = "beyzaguven"
                        },
                        new
                        {
                            Id = "4a62b611-8a71-4373-9a4e-56f1f51d9a6a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61c99a8f-20c4-44f8-926f-3ea6f55fe0da",
                            Email = "busragunduz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRAGUNDUZ@GMAIL.COM",
                            NormalizedUserName = "BUSRAGUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEFAmxAFBNxSrl2vf7Ac9HkDR9IrC/pXSLadPW+USYI0gx/lLDQ6mTPy7xj3aoTcBkQ==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ef0713a-9f64-447b-a66c-f05eb1731a25",
                            TwoFactorEnabled = false,
                            UserName = "busragunduz"
                        },
                        new
                        {
                            Id = "023dd29e-87aa-422e-bd6e-c9e3b95ed144",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1392ade4-d701-47e7-a553-294330bb3f39",
                            Email = "mehmetyildirim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETYILDIRIM@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAENMs9XX6mdI15Hj5PKPpm6eMpt49ZfF9EsSx00YYc9XZFhgp1V/Or3aYwz2fJp/OIQ==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad75e88a-7c80-4c30-89db-d70010337956",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildirim"
                        },
                        new
                        {
                            Id = "0df62a18-3a43-4e76-8d1b-027c70812987",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77814c47-41b6-4069-9e75-a37859fca6ea",
                            Email = "aysegulguzel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEGULGUZEL@GMAIL.COM",
                            NormalizedUserName = "AYSEGULGUZEL",
                            PasswordHash = "AQAAAAIAAYagAAAAENUamAaxtxUVhjgY+9lBqLaxPDiJ341sb79xOWWbXKn/siMjrYHFBUdW0QZylssZNA==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "683cff8c-a2d1-4d26-8600-9251b3dd78ac",
                            TwoFactorEnabled = false,
                            UserName = "aysegulguzel"
                        },
                        new
                        {
                            Id = "d87d415b-c586-4d0b-8b29-5aad0cb7dbb4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d8f55eb2-c6c4-423d-b81b-0e002f8721cf",
                            Email = "efeyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EFEYILMAZ@GMAIL.COM",
                            NormalizedUserName = "EFEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDCUEH0SoLbVyFVdZTGHtTouY2U4NkMSfy0M0CW2a/7c21xL9eMLFHn2Zd1NSeZmTQ==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c0c0a6dd-1a7b-45b7-b216-f6bfb86cd9af",
                            TwoFactorEnabled = false,
                            UserName = "efeyilmaz"
                        },
                        new
                        {
                            Id = "80df8e26-a335-447d-b25c-673c6fd96de7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "19bdcba0-1c36-47b7-8874-00f4dda55381",
                            Email = "arzuozcan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARZUOZCAN@GMAIL.COM",
                            NormalizedUserName = "ARZUOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHnJpdnAZpqzfDCsii4Z6z4tY0qcOs15pu78e7N7RQV2EZbnBtHlag7w260tFy8IQA==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1a6eff48-41ed-485d-836a-d792f952587f",
                            TwoFactorEnabled = false,
                            UserName = "arzuozcan"
                        },
                        new
                        {
                            Id = "a5b31434-ceaf-4c05-b736-ba0537b0addf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b0490b00-d48e-471f-8afa-0d504b7fd265",
                            Email = "mugesecer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MUGESECER@GMAIL.COM",
                            NormalizedUserName = "MUGESECER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPo4rafUkhd4i3YTuZiFQtyj6J2eEInGm7SmYXlMVKUiGo96QLXRvGUqcFE6J1cbIw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "837f931f-25f6-4d6e-8c8f-8c0758401185",
                            TwoFactorEnabled = false,
                            UserName = "mugesecer"
                        },
                        new
                        {
                            Id = "abfe089f-640e-40e5-9716-78469357f2d6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e38e28ad-e382-45b0-835a-55dc605e2efc",
                            Email = "duygukara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYGUKARA@GMAIL.COM",
                            NormalizedUserName = "DUYGUKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJamG2qHvguU7Lj1LLOatcgMKKwqbEdKU3QhlWIzua/TRT1Ip6+fUHUWQL6CZ0o7mQ==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc0e374a-5b88-475c-aebd-ad2f1f575bab",
                            TwoFactorEnabled = false,
                            UserName = "duygukara"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Gamze Yılmaz. Üniversite öğrencisiyim. Gitar çalmayı çok seviyorum.",
                            FirstName = "Gamze",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Yıldız",
                            LessonPlace = "Yüz Yüze",
                            Url = "gamze-yildiz",
                            UserId = "59ec29f5-16c3-460a-9eea-ce9817acd365"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "İzmir",
                            Description = "Tenis öğrenmek istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Akyılmaz",
                            LessonPlace = "Yüz Yüze",
                            Url = "ahmet-akyilmaz",
                            UserId = "c14d4755-ef86-43fb-93c0-9d338694c945"
                        },
                        new
                        {
                            Id = 3,
                            Age = 16,
                            City = "Ankara",
                            Description = "Merhaba, ben Ayşe Candan. Lise öğrencisiyim. Matematik derslerime yardımcı bir öğretmen arıyorum",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Candan",
                            LessonPlace = "Online",
                            Url = "ayse-candan",
                            UserId = "d866f366-1251-499a-aedb-5116ecb4447e"
                        },
                        new
                        {
                            Id = 4,
                            Age = 18,
                            City = "Bursa",
                            Description = "Merhaba, ben Merve Akman. Fizik derslerinde bana yardımcı olabilecek bir öğretmen arıyorum",
                            FirstName = "Merve",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Akman",
                            LessonPlace = "Online",
                            Url = "merve-akman",
                            UserId = "fb051eec-1b69-4d9a-ae97-57863cf83321"
                        },
                        new
                        {
                            Id = 5,
                            Age = 22,
                            City = "İstanbul",
                            Description = "Merhaba, ben Ali Kara. İngilizce derslerinde bana yardımcı olabilecek bir öğretmen arıyorum.",
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Url = "ali-kara",
                            UserId = "1a92938a-5039-496b-aaff-b76ae73ea5c6"
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            City = "İzmir",
                            Description = "Merhaba, ben Ayşe Sağlam. Çeşitli dans dersleri almak istiyorum. Aynı zamanda müzik alanına da çok ilgiliyim, bu sebepten piyano dersleri almak için de bir hoca arıyorum.",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Sağlam",
                            LessonPlace = "Yüz yüze",
                            Url = "ayse-saglam",
                            UserId = "6e22c75f-6b7c-4fbf-999b-fa2fc80ad400"
                        },
                        new
                        {
                            Id = 7,
                            Age = 17,
                            City = "Adana",
                            Description = "Merhaba, ben Ahmet Ak. Matematik ve Fizik alanlarında bana sınava hazırlık sürecinde yardımcı olacak hocalardan ders almak istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Ak",
                            LessonPlace = "Online",
                            Url = "ahmet-ak",
                            UserId = "b4f20ec2-77ed-4c97-8cf3-3d65ee6c8071"
                        },
                        new
                        {
                            Id = 8,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Beyza Güven. Mühendislik öğrencisiyim ve AutoCad eğitimi almak istiyorum. Bana bu konuda yardımcı olabilecek eğitmenlerle iletişime geçmek istiyorum.",
                            FirstName = "Beyza",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Güven",
                            LessonPlace = "Online",
                            Url = "beyza-guven",
                            UserId = "b2d02d00-2588-4407-b8d2-8cf9295269de"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StudentCategories", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CategoryId = 16
                        },
                        new
                        {
                            StudentId = 2,
                            CategoryId = 15
                        },
                        new
                        {
                            StudentId = 3,
                            CategoryId = 19
                        },
                        new
                        {
                            StudentId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 5,
                            CategoryId = 18
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 9
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 19
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            CategoryId = 11
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 35,
                            City = "İstanbul",
                            Description = "Hello! 4 yıllık kurum ve özel ders deneyimim sonucunda net bir şekilde söyleyebilirim ki öğretme işini çok severek yapıyorum.Çocuklarda ingilizce, genel ingilizce ve iş ingilizcesi başta olmak üzere birçok özel ders deneyimim oldu. Öğrencilerimden beklentim düzenli ve istekli çalışmaları. Kişiye özel dil öğrenme metodları ile öğrenmek istediğiniz dil konusunda size severek yardımcı olabilirim. Sınava hazırlık ve çeviri çalışmalarınız için de benimle iletişime geçebilirsiniz. ",
                            EducationStatus = "İstanbul Üniversitesi, İngilizce Dili ve Edebiyatı",
                            Experience = "4 yıl",
                            FirstName = "Büşra",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Gündüz",
                            LessonPlace = "Online",
                            Price = 200m,
                            Url = "busra-gunduz",
                            UserId = "4a62b611-8a71-4373-9a4e-56f1f51d9a6a"
                        },
                        new
                        {
                            Id = 2,
                            Age = 42,
                            City = "Ankara",
                            Description = "Çoğunlukla LGS ye hazırlanan öğrencilere Eğitim Koçluğu yaparak matematik dersleri veriyorum.4 yılı üniversitede öğrencilik döneminde olmak üzere toplam 25 yıl matematik dersi anlatma tecrübem vardır.1 adet dershane ve özel okullar için 8. sınıf sınavlara yönelik matematik kitabı yazdım. ",
                            EducationStatus = "Ankara Üniversitesi, Matematik",
                            Experience = "8 yıl",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Yıldırım",
                            LessonPlace = "Online",
                            Price = 250m,
                            Url = "mehmet-yildirim",
                            UserId = "023dd29e-87aa-422e-bd6e-c9e3b95ed144"
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            City = "İzmir",
                            Description = "Boş vakitlerimde ( haftanın her günü öğleden sonra) özel tenis ve yüzme dersleri veriyorum. ",
                            EducationStatus = "Zonguldak Bülent Ecevit Üniversitesi, Beden Eğitimi Ve Spor Öğretmenliği",
                            Experience = "4 yıl",
                            FirstName = "Ayşegül",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Güzel",
                            LessonPlace = "Yüz yüze",
                            Price = 300m,
                            Url = "aysegul-guzel",
                            UserId = "0df62a18-3a43-4e76-8d1b-027c70812987"
                        },
                        new
                        {
                            Id = 4,
                            Age = 38,
                            City = "İstanbul",
                            Description = "Merhaba, Elektro gitar, klasik gitar, caz armonisi, klasik armoni, değişken do tekniğinde kulak eğitimini Türkçe ve İngilizce, tüm dünyada kabul görmüş kaynaklar eşliğinde, makul fiyatlara alabilirsiniz. ",
                            EducationStatus = "Odtü",
                            Experience = "12 yıl",
                            FirstName = "Efe",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Yılmaz",
                            LessonPlace = "Yüz yüze",
                            Price = 250m,
                            Url = "efe-yilmaz",
                            UserId = "d87d415b-c586-4d0b-8b29-5aad0cb7dbb4"
                        },
                        new
                        {
                            Id = 5,
                            Age = 30,
                            City = "Adana",
                            Description = "Önce Anadolu öğretmen lisesi ardından sakarya üniversitesi eğitim fakültesinde lisans eğitimimi tamamladım.2014 yılında mezun olduktan sonra hatrı sayılır Final kurumlarında uzun bir süre öğretmenlik yaptım.Çeşitli çocuk gelişimi ve kişisel gelişim belgelerim mevcut.Şu andada bu kurumda aktif öğretmen olarak çalışmaktayım.Derslerimde iddialı ve alanımda kendime fazlasıyla güvenmekteyim. ",
                            EducationStatus = "Sakarya Üniversitesi , Fizik",
                            Experience = "10 yıl",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Özcan",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "arzu-ozcan",
                            UserId = "80df8e26-a335-447d-b25c-673c6fd96de7"
                        },
                        new
                        {
                            Id = 6,
                            Age = 36,
                            City = "İzmir",
                            Description = "Klasik batı müziği keman bölümü okuyorum. Aynı zamanda piyano çalıyorum. 8 yıl bale ve modern dans eğitimi aldım. ",
                            EducationStatus = "İtü Devlet Konservatuar",
                            Experience = "15 yıl",
                            FirstName = "Müge",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Seçer",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "muge-secer",
                            UserId = "a5b31434-ceaf-4c05-b736-ba0537b0addf"
                        },
                        new
                        {
                            Id = 7,
                            Age = 35,
                            City = "İstanbul",
                            Description = "2014 yılında Mimarlık bölümünü 3. olarak 3.06 ortalama ile bitirdim. Üniversite de okuduğum dönem boyunca üst sınıfların projelerini çizer ve modelleme işleri yapardım. Şuan İstanbul da özel bir şirkette çalışmaktayım. Yaklaşık 8 yıldır Mimarlık ve ya İç Mimarlık öğrencilerine özel ders vermekteyim. Autocad, Sketchup modelleme ve Photoshop programları uzmanlık alanımdır. Çalıştığım öğrencilerle Autocad tasarım ve proje çizimlerin dışında modelleme işleri ve jüri sunum için gerekli Photoshop işlerini de birlikte yürütmekteyiz. Ayrıca öğrencilerin ihtiyaçları doğrultusunda ders dışında her zaman telefondan irtibat halinde kalmaktayım.Çoğunlukla online olarak, öğrencinin tercihine göre google meets , zoom ve ya skype üzerinden ders verilmektedir. ",
                            EducationStatus = "İtü, Mimarlık",
                            Experience = "15 yıl",
                            FirstName = "Duygu",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "duygu-kara",
                            UserId = "abfe089f-640e-40e5-9716-78469357f2d6"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TeacherCategories", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            CategoryId = 18
                        },
                        new
                        {
                            TeacherId = 2,
                            CategoryId = 19
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 14
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 15
                        },
                        new
                        {
                            TeacherId = 4,
                            CategoryId = 16
                        },
                        new
                        {
                            TeacherId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            TeacherId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 11
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 17
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 4,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "66489368-2fa5-4bfc-aaa4-ed3ecf526aa2",
                            RoleId = "12c17632-dcee-4c30-a5d4-0e8c58e25552"
                        },
                        new
                        {
                            UserId = "59ec29f5-16c3-460a-9eea-ce9817acd365",
                            RoleId = "ea49c988-55fd-4b35-a8b5-ec706e8c0f4b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany("StudentCategories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherCategories")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentCategories");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
