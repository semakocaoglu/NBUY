// <auto-generated />
using System;
using EducationApp.Data.Concrete.EfCore.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EducationApp.Data.Migrations
{
    [DbContext(typeof(EducationAppContext))]
    partial class EducationAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.1");

            modelBuilder.Entity("EducationApp.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("UpCatId")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "",
                            Name = "Matematik",
                            UpCatId = 0,
                            Url = "matematik"
                        },
                        new
                        {
                            Id = 2,
                            Description = "",
                            Name = "Fizik",
                            UpCatId = 0,
                            Url = "fizik"
                        },
                        new
                        {
                            Id = 3,
                            Description = "",
                            Name = "Kimya",
                            UpCatId = 0,
                            Url = "kimya"
                        },
                        new
                        {
                            Id = 4,
                            Description = "",
                            Name = "İlkokul Dersleri",
                            UpCatId = 0,
                            Url = "ilkokul-dersleri"
                        },
                        new
                        {
                            Id = 5,
                            Description = "",
                            Name = "Yabancı Dil",
                            UpCatId = 0,
                            Url = "yabanci-dil"
                        },
                        new
                        {
                            Id = 6,
                            Description = "",
                            Name = "Almanca",
                            UpCatId = 5,
                            Url = "almanca"
                        },
                        new
                        {
                            Id = 7,
                            Description = "",
                            Name = "Sanat",
                            UpCatId = 0,
                            Url = "sanat"
                        },
                        new
                        {
                            Id = 8,
                            Description = "",
                            Name = "Dans",
                            UpCatId = 7,
                            Url = "dans"
                        },
                        new
                        {
                            Id = 9,
                            Description = "",
                            Name = "Piyano",
                            UpCatId = 7,
                            Url = "piyano"
                        },
                        new
                        {
                            Id = 10,
                            Description = "",
                            Name = "Bilgisayar",
                            UpCatId = 0,
                            Url = "bilgisayar"
                        },
                        new
                        {
                            Id = 11,
                            Description = "",
                            Name = "AutoCad",
                            UpCatId = 10,
                            Url = "autocad"
                        },
                        new
                        {
                            Id = 12,
                            Description = "",
                            Name = "JavaScript",
                            UpCatId = 10,
                            Url = "javascript"
                        },
                        new
                        {
                            Id = 13,
                            Description = "",
                            Name = "Spor",
                            UpCatId = 0,
                            Url = "spor"
                        },
                        new
                        {
                            Id = 14,
                            Description = "",
                            Name = "Yüzme",
                            UpCatId = 13,
                            Url = "yüzme"
                        },
                        new
                        {
                            Id = 15,
                            Description = "",
                            Name = "Tenis",
                            UpCatId = 13,
                            Url = "tenis"
                        },
                        new
                        {
                            Id = 16,
                            Description = "",
                            Name = "Gitar",
                            UpCatId = 7,
                            Url = "gitar"
                        },
                        new
                        {
                            Id = 17,
                            Description = "",
                            Name = "Photoshop",
                            UpCatId = 10,
                            Url = "photoshop"
                        },
                        new
                        {
                            Id = 18,
                            Description = "",
                            Name = "İnglizce",
                            UpCatId = 15,
                            Url = "ingilizce"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "100d953f-df64-4954-b732-647c46b2a4d2",
                            Description = "Admin rolü",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "10361442-781e-4edf-a1f0-e366a3ff3daa",
                            Description = "User rolü",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "014e78c3-9ca9-4eea-9aed-69e17a52b34d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cee66eb-b69d-4473-bba7-cf491b2ede99",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPu2vZhVTeVor+KG6Zk1x2eOK4Dvxozqf+vdJDS/Ul24tclX8R+h5Dl3YlXwoUBqGQ==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8c2bff73-a6d8-4bdf-b9a7-a4e1498eb199",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f4d7d4fe-01b9-4e8a-8bc7-99b2a8bf9f97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "04444b89-740b-4ab8-8247-35c8126cf5fe",
                            Email = "gamzeyildiz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "GAMZEYLDIZ@GMAIL.COM",
                            NormalizedUserName = "GAMZEYILDIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMmlXcVSn4FEZ4m5eRV1Vkdrsikh4RXs/UwKCq40ovfW0KLyizhHYFngCoxv/7eFQ==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39289d21-c447-453f-968a-152a55348697",
                            TwoFactorEnabled = false,
                            UserName = "gamzeyildiz"
                        },
                        new
                        {
                            Id = "0c11fd46-f839-4627-887f-6c5f6c7ece5a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0488540-03a5-4911-b2a1-2337f6ae12ad",
                            Email = "ahmetakyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAKYILMAZ@GMAIL.COM",
                            NormalizedUserName = "AHMETAKYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEC/hah7Jqkiv6kEuUXax93B2MbKJ0x973EPMRPCbIK3e+1uPhbjYGf2OtvMgVEK9bQ==",
                            PhoneNumber = "05368667989",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1df40705-439b-4fb1-9596-b4bb61939be4",
                            TwoFactorEnabled = false,
                            UserName = "ahmetakyilmaz"
                        },
                        new
                        {
                            Id = "1561b1a6-e995-48b1-a7b4-c46a1c55b26e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "59cbc1fe-70de-4245-8660-200821c3e99a",
                            Email = "aysecandan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSECANDAN@GMAIL.COM",
                            NormalizedUserName = "AYSECANDAN",
                            PasswordHash = "AQAAAAIAAYagAAAAENHMkP+53044q2wnmrI4XafFKCgft04MYVHDy6JRlPs2OTKRzSX8O/5xKKeCQPJfuw==",
                            PhoneNumber = "05256552535",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "026fa19d-2ca8-4d18-8381-1ab5d43f741b",
                            TwoFactorEnabled = false,
                            UserName = "aysecandan"
                        },
                        new
                        {
                            Id = "d9054981-ca54-46c8-bb58-caf32b3c235e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8ee89783-25f6-43d6-8d3f-f31c529248ff",
                            Email = "merveakman@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MERVEAKMAN@GMAIL.COM",
                            NormalizedUserName = "MERVEAKMAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOjN9xhUX4YAw5kmJtFf6Y3Az65TibzqjGVndwOjjIxflbtK5IEVpxLhqc22PFiKgA==",
                            PhoneNumber = "05321498998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ec005acd-ec2f-4473-8ffe-ab799a1ad722",
                            TwoFactorEnabled = false,
                            UserName = "merveakman"
                        },
                        new
                        {
                            Id = "642e7861-c966-49ee-b3ed-e3edb03aefd9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ae262ab-fd48-4443-a4aa-b3ae486e772a",
                            Email = "alikara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALIKARA@GMAIL.COM",
                            NormalizedUserName = "ALIKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAEJMWvAz2fBW7pORgUYkQ0s/dSzXYryEtV9XAWk6hDGUBRDPwbu6cviXYPnKWmG2P/w==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9aeda713-9774-4a6c-9638-8984ca2c7600",
                            TwoFactorEnabled = false,
                            UserName = "alikara"
                        },
                        new
                        {
                            Id = "c967fe63-cc09-4b58-b3f2-38206267cf0c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63e0bc87-9fa4-4203-a161-83850cf277b9",
                            Email = "aysesaglam@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSESAGLAM@GMAIL.COM",
                            NormalizedUserName = "AYSESAGLAM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPZNfUokKWgisI4MmGRa4ic12LluC3aJL91nMN3GFQoiDhpThW8wS12U1o8QxcvepA==",
                            PhoneNumber = "05256558998",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c49b1fc9-8f51-4e09-bed6-09d614d1fcd5",
                            TwoFactorEnabled = false,
                            UserName = "aysesaglam"
                        },
                        new
                        {
                            Id = "3b309248-4466-42a3-98b9-70366c8ee8e3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3cd40930-8389-44b9-94c2-a309dc341e90",
                            Email = "ahmetak@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AHMETAK@GMAIL.COM",
                            NormalizedUserName = "AHMETAK",
                            PasswordHash = "AQAAAAIAAYagAAAAEHxI1n1+rWX/PHxJlwR3Q9pI574flvrLMnglIKUN1KYBhLjMt3MOdu1/SJZBPAPfXQ==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d01ee43d-3eae-4f8b-a607-b9dfceb0f132",
                            TwoFactorEnabled = false,
                            UserName = "ahmetak"
                        },
                        new
                        {
                            Id = "3f515e06-896a-443c-a131-978a3498f39b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3bc2712d-57e4-4755-b9fb-5ba0a9576b6c",
                            Email = "beyzaguven@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BEYZAGUVEN@GMAIL.COM",
                            NormalizedUserName = "BEYZAGUVEN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDotE0WzZZgJDe4XgJuZvPKicr/fA0dYq1dnnxYkZvb8yMjEje7NfF8McKDTPCPveQ==",
                            PhoneNumber = "05359886547",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d22d7a6e-5c64-4243-a85a-b9bf94657b4d",
                            TwoFactorEnabled = false,
                            UserName = "beyzaguven"
                        },
                        new
                        {
                            Id = "b66bdb8f-d9c8-4d82-b477-a126aa5a6055",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0246f894-d337-4e7f-9c9a-587da221bec1",
                            Email = "busragunduz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "BUSRAGUNDUZ@GMAIL.COM",
                            NormalizedUserName = "BUSRAGUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEKaYrap57Gdzg+/EBxV17mbWMiVo2uAXVyRJSHJ2MtbUHfYwsQBUuQvTf6fmRYeN+g==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a59a8de4-4961-48bc-9cc3-36d941c2ca7a",
                            TwoFactorEnabled = false,
                            UserName = "busragunduz"
                        },
                        new
                        {
                            Id = "9debf17e-5cce-4585-80d9-0ec8ca873b48",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f5b8deae-3c9a-4faa-8e0f-c328467db0e0",
                            Email = "mehmetyildirim@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MEHMETYILDIRIM@GMAIL.COM",
                            NormalizedUserName = "MEHMETYILDIRIM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPxE/Vc7T2Dl+mxEFEETLKjRM39HE9M4jX2YViEs3kuYco2gKV2Av75V+Gi5IKj6fw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0bb3d8b6-6c55-4f32-91de-446f313c0c59",
                            TwoFactorEnabled = false,
                            UserName = "mehmetyildirim"
                        },
                        new
                        {
                            Id = "4a12586c-e1f1-42cc-b045-9d724066cfbe",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0961524d-4f9f-4fec-a583-dfbd8429dced",
                            Email = "aysegulguzel@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "AYSEGULGUZEL@GMAIL.COM",
                            NormalizedUserName = "AYSEGULGUZEL",
                            PasswordHash = "AQAAAAIAAYagAAAAELLrlsgKxm9yE7tapuHr049BfRe6gT8rS79pUJ3pcc8W6Rs23txVGlcOPjuC/cXLuw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "790b0b6f-5206-4fe3-8b3e-398c250843ea",
                            TwoFactorEnabled = false,
                            UserName = "aysegulguzel"
                        },
                        new
                        {
                            Id = "e311179c-ade0-4d70-8103-3210ddcccd1c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4bb7cd54-e655-48ef-9aa7-ca46df34a24d",
                            Email = "efeyilmaz@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EFEYILMAZ@GMAIL.COM",
                            NormalizedUserName = "EFEYILMAZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEGvs/0ie5HDDOjpoubaho6TqmrvO2STTiD1CrOmWE+AvEXQKy25TIyvz0nMS84sKvA==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bcef74f-a539-4cbf-b643-b4ddb91322d7",
                            TwoFactorEnabled = false,
                            UserName = "efeyilmaz"
                        },
                        new
                        {
                            Id = "d6350ee5-7bc0-4f3a-877c-12c65c257d34",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0a5b7c5-c235-44be-b355-545b8c2504bb",
                            Email = "arzuozcan@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ARZUOZCAN@GMAIL.COM",
                            NormalizedUserName = "ARZUOZCAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAXlsUv3AEzbZjSDLCklb/TzxcQWiitut8yWDcN9+h1lnjKMVsS8/UiCyw3wUdVXrA==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d57ce22-ffc6-4d67-9d80-75208e69e9c3",
                            TwoFactorEnabled = false,
                            UserName = "arzuozcan"
                        },
                        new
                        {
                            Id = "412eed96-796d-4926-bee9-c5571197d49e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7b2f5d4-b49f-4f62-9bf5-4828394a6526",
                            Email = "mugesecer@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MUGESECER@GMAIL.COM",
                            NormalizedUserName = "MUGESECER",
                            PasswordHash = "AQAAAAIAAYagAAAAEE8jsCDxh7mzJcPTL5RXcGRa7eoumrMtHkvmJCb5nrzq/0fAI7VKtUZeUN9aEw5OIw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d5af2c99-228a-460a-b9be-618d266d3e6a",
                            TwoFactorEnabled = false,
                            UserName = "mugesecer"
                        },
                        new
                        {
                            Id = "701e3800-6ef3-4d16-acfa-89bebb6d2064",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3d014c7-c511-46a9-825c-d12f005d2159",
                            Email = "duygukara@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DUYGUKARA@GMAIL.COM",
                            NormalizedUserName = "DUYGUKARA",
                            PasswordHash = "AQAAAAIAAYagAAAAECDHNLcUu6Q6OdC5iATx8Wy9P1M4nm0OEMKd+NEPhpCM6mW5bk8KipFmI9kAIvHBCw==",
                            PhoneNumber = "05256554545",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "29bc607c-d792-47b2-bdd9-b9674654b987",
                            TwoFactorEnabled = false,
                            UserName = "duygukara"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Gamze Yılmaz. Üniversite öğrencisiyim. Gitar çalmayı çok seviyorum.",
                            FirstName = "Gamze",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Yıldız",
                            LessonPlace = "Yüz Yüze",
                            Url = "gamze-yildiz",
                            UserId = "f4d7d4fe-01b9-4e8a-8bc7-99b2a8bf9f97"
                        },
                        new
                        {
                            Id = 2,
                            Age = 25,
                            City = "İzmir",
                            Description = "Tenis öğrenmek istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Akyılmaz",
                            LessonPlace = "Yüz Yüze",
                            Url = "ahmet-akyilmaz",
                            UserId = "0c11fd46-f839-4627-887f-6c5f6c7ece5a"
                        },
                        new
                        {
                            Id = 3,
                            Age = 16,
                            City = "Ankara",
                            Description = "Merhaba, ben Ayşe Candan. Lise öğrencisiyim. Matematik derslerime yardımcı bir öğretmen arıyorum",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Candan",
                            LessonPlace = "Online",
                            Url = "ayse-candan",
                            UserId = "1561b1a6-e995-48b1-a7b4-c46a1c55b26e"
                        },
                        new
                        {
                            Id = 4,
                            Age = 18,
                            City = "Bursa",
                            Description = "Merhaba, ben Merve Akman. Fizik derslerinde bana yardımcı olabilecek bir öğretmen arıyorum",
                            FirstName = "Merve",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Akman",
                            LessonPlace = "Online",
                            Url = "merve-akman",
                            UserId = "d9054981-ca54-46c8-bb58-caf32b3c235e"
                        },
                        new
                        {
                            Id = 5,
                            Age = 22,
                            City = "İstanbul",
                            Description = "Merhaba, ben Ali Kara. İngilizce derslerinde bana yardımcı olabilecek bir öğretmen arıyorum.",
                            FirstName = "Ali",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Url = "ali-kara",
                            UserId = "642e7861-c966-49ee-b3ed-e3edb03aefd9"
                        },
                        new
                        {
                            Id = 6,
                            Age = 35,
                            City = "İzmir",
                            Description = "Merhaba, ben Ayşe Sağlam. Çeşitli dans dersleri almak istiyorum. Aynı zamanda müzik alanına da çok ilgiliyim, bu sebepten piyano dersleri almak için de bir hoca arıyorum.",
                            FirstName = "Ayşe",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Sağlam",
                            LessonPlace = "Yüz yüze",
                            Url = "ayse-saglam",
                            UserId = "c967fe63-cc09-4b58-b3f2-38206267cf0c"
                        },
                        new
                        {
                            Id = 7,
                            Age = 17,
                            City = "Adana",
                            Description = "Merhaba, ben Ahmet Ak. Matematik ve Fizik alanlarında bana sınava hazırlık sürecinde yardımcı olacak hocalardan ders almak istiyorum.",
                            FirstName = "Ahmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Ak",
                            LessonPlace = "Online",
                            Url = "ahmet-ak",
                            UserId = "3b309248-4466-42a3-98b9-70366c8ee8e3"
                        },
                        new
                        {
                            Id = 8,
                            Age = 20,
                            City = "İstanbul",
                            Description = "Merhaba, ben Beyza Güven. Mühendislik öğrencisiyim ve AutoCad eğitimi almak istiyorum. Bana bu konuda yardımcı olabilecek eğitmenlerle iletişime geçmek istiyorum.",
                            FirstName = "Beyza",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Güven",
                            LessonPlace = "Online",
                            Url = "beyza-guven",
                            UserId = "3f515e06-896a-443c-a131-978a3498f39b"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StudentId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("StudentCategories", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CategoryId = 16
                        },
                        new
                        {
                            StudentId = 2,
                            CategoryId = 15
                        },
                        new
                        {
                            StudentId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            StudentId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 5,
                            CategoryId = 18
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            StudentId = 6,
                            CategoryId = 9
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            StudentId = 7,
                            CategoryId = 2
                        },
                        new
                        {
                            StudentId = 8,
                            CategoryId = 11
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("EducationStatus")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LessonPlace")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Teacher", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 35,
                            City = "İstanbul",
                            Description = "Hello! 4 yıllık kurum ve özel ders deneyimim sonucunda net bir şekilde söyleyebilirim ki öğretme işini çok severek yapıyorum.Çocuklarda ingilizce, genel ingilizce ve iş ingilizcesi başta olmak üzere birçok özel ders deneyimim oldu. Öğrencilerimden beklentim düzenli ve istekli çalışmaları. Kişiye özel dil öğrenme metodları ile öğrenmek istediğiniz dil konusunda size severek yardımcı olabilirim. Sınava hazırlık ve çeviri çalışmalarınız için de benimle iletişime geçebilirsiniz. ",
                            EducationStatus = "İstanbul Üniversitesi, İngilizce Dili ve Edebiyatı",
                            Experience = "4 yıl",
                            FirstName = "Büşra",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Gündüz",
                            LessonPlace = "Online",
                            Price = 200m,
                            Url = "busra-gunduz",
                            UserId = "b66bdb8f-d9c8-4d82-b477-a126aa5a6055"
                        },
                        new
                        {
                            Id = 2,
                            Age = 42,
                            City = "Ankara",
                            Description = "Çoğunlukla LGS ye hazırlanan öğrencilere Eğitim Koçluğu yaparak matematik dersleri veriyorum.4 yılı üniversitede öğrencilik döneminde olmak üzere toplam 25 yıl matematik dersi anlatma tecrübem vardır.1 adet dershane ve özel okullar için 8. sınıf sınavlara yönelik matematik kitabı yazdım. ",
                            EducationStatus = "Ankara Üniversitesi, Matematik",
                            Experience = "8 yıl",
                            FirstName = "Mehmet",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Yıldırım",
                            LessonPlace = "Online",
                            Price = 250m,
                            Url = "mehmet-yildirim",
                            UserId = "9debf17e-5cce-4585-80d9-0ec8ca873b48"
                        },
                        new
                        {
                            Id = 3,
                            Age = 27,
                            City = "İzmir",
                            Description = "Boş vakitlerimde ( haftanın her günü öğleden sonra) özel tenis ve yüzme dersleri veriyorum. ",
                            EducationStatus = "Zonguldak Bülent Ecevit Üniversitesi, Beden Eğitimi Ve Spor Öğretmenliği",
                            Experience = "4 yıl",
                            FirstName = "Ayşegül",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Güzel",
                            LessonPlace = "Yüz yüze",
                            Price = 300m,
                            Url = "aysegul-guzel",
                            UserId = "4a12586c-e1f1-42cc-b045-9d724066cfbe"
                        },
                        new
                        {
                            Id = 4,
                            Age = 38,
                            City = "İstanbul",
                            Description = "Merhaba, Elektro gitar, klasik gitar, caz armonisi, klasik armoni, değişken do tekniğinde kulak eğitimini Türkçe ve İngilizce, tüm dünyada kabul görmüş kaynaklar eşliğinde, makul fiyatlara alabilirsiniz. ",
                            EducationStatus = "Odtü",
                            Experience = "12 yıl",
                            FirstName = "Efe",
                            Gender = "Erkek",
                            ImageUrl = "2.png",
                            LastName = "Yılmaz",
                            LessonPlace = "Yüz yüze",
                            Price = 250m,
                            Url = "efe-yilmaz",
                            UserId = "e311179c-ade0-4d70-8103-3210ddcccd1c"
                        },
                        new
                        {
                            Id = 5,
                            Age = 30,
                            City = "Adana",
                            Description = "Önce Anadolu öğretmen lisesi ardından sakarya üniversitesi eğitim fakültesinde lisans eğitimimi tamamladım.2014 yılında mezun olduktan sonra hatrı sayılır Final kurumlarında uzun bir süre öğretmenlik yaptım.Çeşitli çocuk gelişimi ve kişisel gelişim belgelerim mevcut.Şu andada bu kurumda aktif öğretmen olarak çalışmaktayım.Derslerimde iddialı ve alanımda kendime fazlasıyla güvenmekteyim. ",
                            EducationStatus = "Sakarya Üniversitesi , Fizik",
                            Experience = "10 yıl",
                            FirstName = "Arzu",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Özcan",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "arzu-ozcan",
                            UserId = "d6350ee5-7bc0-4f3a-877c-12c65c257d34"
                        },
                        new
                        {
                            Id = 6,
                            Age = 36,
                            City = "İzmir",
                            Description = "Klasik batı müziği keman bölümü okuyorum. Aynı zamanda piyano çalıyorum. 8 yıl bale ve modern dans eğitimi aldım. ",
                            EducationStatus = "İtü Devlet Konservatuar",
                            Experience = "15 yıl",
                            FirstName = "Müge",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Seçer",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "muge-secer",
                            UserId = "412eed96-796d-4926-bee9-c5571197d49e"
                        },
                        new
                        {
                            Id = 7,
                            Age = 35,
                            City = "İstanbul",
                            Description = "2014 yılında Mimarlık bölümünü 3. olarak 3.06 ortalama ile bitirdim. Üniversite de okuduğum dönem boyunca üst sınıfların projelerini çizer ve modelleme işleri yapardım. Şuan İstanbul da özel bir şirkette çalışmaktayım. Yaklaşık 8 yıldır Mimarlık ve ya İç Mimarlık öğrencilerine özel ders vermekteyim. Autocad, Sketchup modelleme ve Photoshop programları uzmanlık alanımdır. Çalıştığım öğrencilerle Autocad tasarım ve proje çizimlerin dışında modelleme işleri ve jüri sunum için gerekli Photoshop işlerini de birlikte yürütmekteyiz. Ayrıca öğrencilerin ihtiyaçları doğrultusunda ders dışında her zaman telefondan irtibat halinde kalmaktayım.Çoğunlukla online olarak, öğrencinin tercihine göre google meets , zoom ve ya skype üzerinden ders verilmektedir. ",
                            EducationStatus = "İtü, Mimarlık",
                            Experience = "15 yıl",
                            FirstName = "Duygu",
                            Gender = "Kadın",
                            ImageUrl = "1.png",
                            LastName = "Kara",
                            LessonPlace = "Online",
                            Price = 300m,
                            Url = "duygu-kara",
                            UserId = "701e3800-6ef3-4d16-acfa-89bebb6d2064"
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("TeacherCategories", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 1,
                            CategoryId = 18
                        },
                        new
                        {
                            TeacherId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 14
                        },
                        new
                        {
                            TeacherId = 3,
                            CategoryId = 15
                        },
                        new
                        {
                            TeacherId = 4,
                            CategoryId = 16
                        },
                        new
                        {
                            TeacherId = 5,
                            CategoryId = 2
                        },
                        new
                        {
                            TeacherId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 11
                        },
                        new
                        {
                            TeacherId = 7,
                            CategoryId = 17
                        });
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.Property<int?>("TeacherId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeacherId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("TeacherStudents", (string)null);

                    b.HasData(
                        new
                        {
                            TeacherId = 4,
                            StudentId = 1
                        },
                        new
                        {
                            TeacherId = 3,
                            StudentId = 2
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 3
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 4
                        },
                        new
                        {
                            TeacherId = 1,
                            StudentId = 5
                        },
                        new
                        {
                            TeacherId = 6,
                            StudentId = 6
                        },
                        new
                        {
                            TeacherId = 5,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 2,
                            StudentId = 7
                        },
                        new
                        {
                            TeacherId = 7,
                            StudentId = 8
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "014e78c3-9ca9-4eea-9aed-69e17a52b34d",
                            RoleId = "100d953f-df64-4954-b732-647c46b2a4d2"
                        },
                        new
                        {
                            UserId = "f4d7d4fe-01b9-4e8a-8bc7-99b2a8bf9f97",
                            RoleId = "10361442-781e-4edf-a1f0-e366a3ff3daa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.StudentCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany("StudentCategories")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", "User")
                        .WithMany("Teachers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherCategory", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherCategories")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.TeacherStudent", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EducationApp.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Identity.User", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Student", b =>
                {
                    b.Navigation("StudentCategories");
                });

            modelBuilder.Entity("EducationApp.Entity.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
